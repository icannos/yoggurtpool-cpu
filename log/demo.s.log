
 PASS 1
processing 
-1
[]
processing 
-1
[]
processing leti r0 50
-1
['leti', 'r0', '50']
... @0 0000000000000000  :  01110001000110010
                          0111 000 10 00110010   size=17
processing leti r1 0
-1
['leti', 'r1', '0']
... @17 0000000000010001  :  011100100
                          0111 001 0 0   size=9
processing leti r2 0
-1
['leti', 'r2', '0']
... @26 0000000000011010  :  011101000
                          0111 010 0 0   size=9
processing leti r3 10
-1
['leti', 'r3', '10']
... @35 0000000000100011  :  01110111000001010
                          0111 011 10 00001010   size=17
processing leti r4 10
-1
['leti', 'r4', '10']
... @52 0000000000110100  :  01111001000001010
                          0111 100 10 00001010   size=17
processing 
-1
[]
processing call fill
-1
['call', 'fill']
... @69 0000000001000101  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing 
-1
[]
processing leti r1 100
-1
['leti', 'r1', '100']
... @93 0000000001011101  :  01110011001100100
                          0111 001 10 01100100   size=17
processing leti r2 100
-1
['leti', 'r2', '100']
... @110 0000000001101110  :  01110101001100100
                          0111 010 10 01100100   size=17
processing leti r3 69
-1
['leti', 'r3', '69']
... @127 0000000001111111  :  01110111001000101
                          0111 011 10 01000101   size=17
processing 
-1
[]
processing call putchar
-1
['call', 'putchar']
... @144 0000000010010000  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing 
-1
[]
processing leti r1 100
-1
['leti', 'r1', '100']
... @168 0000000010101000  :  01110011001100100
                          0111 001 10 01100100   size=17
processing leti r2 90
-1
['leti', 'r2', '90']
... @185 0000000010111001  :  01110101001011010
                          0111 010 10 01011010   size=17
processing leti r3 77
-1
['leti', 'r3', '77']
... @202 0000000011001010  :  01110111001001101
                          0111 011 10 01001101   size=17
processing 
-1
[]
processing call putchar
-1
['call', 'putchar']
... @219 0000000011011011  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing 
-1
[]
processing jump -13
-1
['jump', '-13']
... @243 0000000011110011  :  1010011110011
                          1010 0 11110011   size=13
processing 
-1
[]
processing jump skipfill
-1
['jump', 'skipfill']
... @256 0000000100000000  :  1010100000000000000000
                          1010 10 0000000000000000   size=22
processing fill:
-1
['fill:']
processing push 64 r0
-1
['push', '64', 'r0']
... @278 0000000100010110  :  1110000111000
                          1110000 111 000    size=13
processing push 64 r1
-1
['push', '64', 'r1']
... @291 0000000100100011  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @304 0000000100110000  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @317 0000000100111101  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r4
-1
['push', '64', 'r4']
... @330 0000000101001010  :  1110000111100
                          1110000 111 100    size=13
processing push 64 r5
-1
['push', '64', 'r5']
... @343 0000000101010111  :  1110000111101
                          1110000 111 101    size=13
processing push 64 r6
-1
['push', '64', 'r6']
... @356 0000000101100100  :  1110000111110
                          1110000 111 110    size=13
processing 
-1
[]
processing ;on choisit la plus petite abscisse
0
hey
[]
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @369 0000000101110001  :  0100001011
                          0100 001 011    size=10
processing jumpif lt echange
-1
['jumpif', 'lt', 'echange']
... @379 0000000101111011  :  1011110100000000000000000
                          1011 110 10 0000000000000000   size=25
processing let r5 r1
-1
['let', 'r5', 'r1']
... @404 0000000110010100  :  0110101001
                          0110 101 001    size=10
processing let r1 r3
-1
['let', 'r1', 'r3']
... @414 0000000110011110  :  0110001011
                          0110 001 011    size=10
processing let r3 r5
-1
['let', 'r3', 'r5']
... @424 0000000110101000  :  0110011101
                          0110 011 101    size=10
processing echange:
-1
['echange:']
processing 
-1
[]
processing 
-1
[]
processing ;on choisit la plus grande ordonnee
0
hey
[]
processing cmp r2 r4
-1
['cmp', 'r2', 'r4']
... @434 0000000110110010  :  0100010100
                          0100 010 100    size=10
processing jumpif gt echangebis
-1
['jumpif', 'gt', 'echangebis']
... @444 0000000110111100  :  1011100100000000000000000
                          1011 100 10 0000000000000000   size=25
processing let r5 r2
-1
['let', 'r5', 'r2']
... @469 0000000111010101  :  0110101010
                          0110 101 010    size=10
processing let r2 r4
-1
['let', 'r2', 'r4']
... @479 0000000111011111  :  0110010100
                          0110 010 100    size=10
processing let r4 r5 ; r4 est pour l'instant inutile
10
hey
['let', 'r4', 'r5']
... @489 0000000111101001  :  0110100101
                          0110 100 101    size=10
processing echangebis:
-1
['echangebis:']
processing 
-1
[]
processing sub2 r3 r1 ; r3 contient la largeur du rectangle
11
hey
['sub2', 'r3', 'r1']
... @499 0000000111110011  :  0010011001
                          0010 011 001    size=10
processing add2i r3 1
-1
['add2i', 'r3', '1']
... @509 0000000111111101  :  000101101
                          0001 011 0 1   size=9
processing sub3 r5 r2 r4
-1
['sub3', 'r5', 'r2', 'r4']
... @518 0000001000000110  :  1110100101010100
                          1110100 101 010 100    size=16
processing add2i r5 1; r5 contient le nombre de lignes a tracer (voir si le 1 est utile)
10
hey
['add2i', 'r5', '1']
... @534 0000001000010110  :  000110101
                          0001 101 0 1   size=9
processing leti r4 160
-1
['leti', 'r4', '160']
... @543 0000001000011111  :  011110011000000000000000000000000010100000
                          0111 100 110 00000000000000000000000010100000   size=42
processing sub2 r4 r3; r4 contient le nombre de pixels a sauter avant d'ecrire a nouveau
10
hey
['sub2', 'r4', 'r3']
... @585 0000001001001001  :  0010100011
                          0010 100 011    size=10
processing shift left r4 4 ; nombre de bits a sauter
16
hey
['shift', 'left', 'r4', '4']
... @595 0000001001010011  :  100001000000100
                          1000 0 100 0000100   size=15
processing 
-1
[]
processing ;fin de la preparation calculatoire
0
hey
[]
processing 
-1
[]
processing 
-1
[]
processing ;partie mettant dans r6 l'adresse du premier point
0
hey
[]
processing leti r6 1073350080
-1
['leti', 'r6', '1073350080']
... @610 0000001001100010  :  011111011000111111111110100000010111000000
                          0111 110 110 00111111111110100000010111000000   size=42
processing sub2i r2 127
-1
['sub2i', 'r2', '127']
... @652 0000001010001100  :  00110101001111111
                          0011 010 10 01111111   size=17
processing shift left r2 9
-1
['shift', 'left', 'r2', '9']
... @669 0000001010011101  :  100000100001001
                          1000 0 010 0001001   size=15
processing sub2 r6 r2
-1
['sub2', 'r6', 'r2']
... @684 0000001010101100  :  0010110010
                          0010 110 010    size=10
processing shift left r2 2
-1
['shift', 'left', 'r2', '2']
... @694 0000001010110110  :  100000100000010
                          1000 0 010 0000010   size=15
processing sub2 r6 r2
-1
['sub2', 'r6', 'r2']
... @709 0000001011000101  :  0010110010
                          0010 110 010    size=10
processing shift left r1 4
-1
['shift', 'left', 'r1', '4']
... @719 0000001011001111  :  100000010000100
                          1000 0 001 0000100   size=15
processing add2 r6 r1
-1
['add2', 'r6', 'r1']
... @734 0000001011011110  :  0000110001
                          0000 110 001    size=10
processing setctr a0 r6
-1
['setctr', 'a0', 'r6']
... @744 0000001011101000  :  11011010110
                          110110 10 110    size=11
processing 
-1
[]
processing boucley:
-1
['boucley:']
processing cmpi r5 1 ;on compte le nombre de ligne qui reste a tracer
10
hey
['cmpi', 'r5', '1']
... @755 0000001011110011  :  010110101
                          0101 101 0 1   size=9
processing jumpif slt fin
-1
['jumpif', 'slt', 'fin']
... @764 0000001011111100  :  1011011100000000000000000
                          1011 011 10 0000000000000000   size=25
processing sub2i r5 1
-1
['sub2i', 'r5', '1']
... @789 0000001100010101  :  001110101
                          0011 101 0 1   size=9
processing 
-1
[]
processing let r1 r3
-1
['let', 'r1', 'r3']
... @798 0000001100011110  :  0110001011
                          0110 001 011    size=10
processing bouclex:
-1
['bouclex:']
processing cmpi r3 1 ; on compte le nombre de colonne a remplir
10
hey
['cmpi', 'r3', '1']
... @808 0000001100101000  :  010101101
                          0101 011 0 1   size=9
processing jumpif slt finligne
-1
['jumpif', 'slt', 'finligne']
... @817 0000001100110001  :  1011011100000000000000000
                          1011 011 10 0000000000000000   size=25
processing sub2i r3 1
-1
['sub2i', 'r3', '1']
... @842 0000001101001010  :  001101101
                          0011 011 0 1   size=9
processing write a0 16 r0 ; on ecrit la ligne
15
hey
['write', 'a0', '16', 'r0']
... @851 0000001101010011  :  11010010101000
                          110100 10 101 000    size=14
processing jump bouclex
-1
['jump', 'bouclex']
... @865 0000001101100001  :  1010101111111110110001
                          1010 10 1111111110110001   size=22
processing finligne:
-1
['finligne:']
processing let r3 r1
-1
['let', 'r3', 'r1']
... @887 0000001101110111  :  0110011001
                          0110 011 001    size=10
processing 
-1
[]
processing getctr a0 r6
-1
['getctr', 'a0', 'r6']
... @897 0000001110000001  :  11011110110
                          110111 10 110    size=11
processing add2 r6 r4
-1
['add2', 'r6', 'r4']
... @908 0000001110001100  :  0000110100
                          0000 110 100    size=10
processing setctr a0 r6 ; saut de la ligne
13
hey
['setctr', 'a0', 'r6']
... @918 0000001110010110  :  11011010110
                          110110 10 110    size=11
processing 
-1
[]
processing jump boucley
-1
['jump', 'boucley']
... @929 0000001110100001  :  1010101111111100111100
                          1010 10 1111111100111100   size=22
processing 
-1
[]
processing pop 64 r6
-1
['pop', '64', 'r6']
... @951 0000001110110111  :  1001101111110
                          10011 01 111 110    size=13
processing pop 64 r5
-1
['pop', '64', 'r5']
... @964 0000001111000100  :  1001101111101
                          10011 01 111 101    size=13
processing pop 64 r4
-1
['pop', '64', 'r4']
... @977 0000001111010001  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @990 0000001111011110  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @1003 0000001111101011  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @1016 0000001111111000  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @1029 0000010000000101  :  1001101111000
                          10011 01 111 000    size=13
processing 
-1
[]
processing fin:
-1
['fin:']
processing skipfill:
-1
['skipfill:']
processing 
-1
[]
processing 
-1
[]
processing jump drawend
-1
['jump', 'drawend']
... @1042 0000010000010010  :  1010100000000000000000
                          1010 10 0000000000000000   size=22
processing draw:
-1
['draw:']
processing   push 64 r0
-1
['push', '64', 'r0']
... @1064 0000010000101000  :  1110000111000
                          1110000 111 000    size=13
processing   push 64 r1
-1
['push', '64', 'r1']
... @1077 0000010000110101  :  1110000111001
                          1110000 111 001    size=13
processing   push 64 r2
-1
['push', '64', 'r2']
... @1090 0000010001000010  :  1110000111010
                          1110000 111 010    size=13
processing   push 64 r3
-1
['push', '64', 'r3']
... @1103 0000010001001111  :  1110000111011
                          1110000 111 011    size=13
processing   push 64 r4
-1
['push', '64', 'r4']
... @1116 0000010001011100  :  1110000111100
                          1110000 111 100    size=13
processing 
-1
[]
processing ;mettons les points dans le bon sens
0
hey
[]
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @1129 0000010001101001  :  0100001011
                          0100 001 011    size=10
processing jumpif lt echangedraw
-1
['jumpif', 'lt', 'echangedraw']
... @1139 0000010001110011  :  1011110100000000000000000
                          1011 110 10 0000000000000000   size=25
processing   let r5 r1
-1
['let', 'r5', 'r1']
... @1164 0000010010001100  :  0110101001
                          0110 101 001    size=10
processing   let r1 r3
-1
['let', 'r1', 'r3']
... @1174 0000010010010110  :  0110001011
                          0110 001 011    size=10
processing   let r3 r5
-1
['let', 'r3', 'r5']
... @1184 0000010010100000  :  0110011101
                          0110 011 101    size=10
processing   let r5 r2
-1
['let', 'r5', 'r2']
... @1194 0000010010101010  :  0110101010
                          0110 101 010    size=10
processing   let r2 r4
-1
['let', 'r2', 'r4']
... @1204 0000010010110100  :  0110010100
                          0110 010 100    size=10
processing   let r4 r5
-1
['let', 'r4', 'r5']
... @1214 0000010010111110  :  0110100101
                          0110 100 101    size=10
processing echangedraw:
-1
['echangedraw:']
processing 
-1
[]
processing ;ceci prepare le premier point
0
hey
[]
processing sub3 r5 r3 r1
-1
['sub3', 'r5', 'r3', 'r1']
... @1224 0000010011001000  :  1110100101011001
                          1110100 101 011 001    size=16
processing shift left r5 1 ;r5 contient dx
16
hey
['shift', 'left', 'r5', '1']
... @1240 0000010011011000  :  100001011
                          1000 0 101 1   size=9
processing sub3 r6 r4 r2
-1
['sub3', 'r6', 'r4', 'r2']
... @1249 0000010011100001  :  1110100110100010
                          1110100 110 100 010    size=16
processing shift left r6 1 ;r6 contient dy
16
hey
['shift', 'left', 'r6', '1']
... @1265 0000010011110001  :  100001101
                          1000 0 110 1   size=9
processing 
-1
[]
processing push 64 r7
-1
['push', '64', 'r7']
... @1274 0000010011111010  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @1287 0000010100000111  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @1311 0000010100011111  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @1324 0000010100101100  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @1337 0000010100111001  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @1350 0000010101000110  :  1001101111001
                          10011 01 111 001    size=13
processing 
-1
[]
processing 
-1
[]
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @1363 0000010101010011  :  010111000
                          0101 110 0 0   size=9
processing jumpif slt negatif
-1
['jumpif', 'slt', 'negatif']
... @1372 0000010101011100  :  1011011100000000000000000
                          1011 011 10 0000000000000000   size=25
processing cmp r5 r6
-1
['cmp', 'r5', 'r6']
... @1397 0000010101110101  :  0100101110
                          0100 101 110    size=10
processing jumpif slt grandepente
-1
['jumpif', 'slt', 'grandepente']
... @1407 0000010101111111  :  1011011100000000000000000
                          1011 011 10 0000000000000000   size=25
processing 
-1
[]
processing 
-1
[]
processing ;on met les donnees dans les bons registres pour ce cas
0
hey
[]
processing let r4 r6
-1
['let', 'r4', 'r6']
... @1432 0000010110011000  :  0110100110
                          0110 100 110    size=10
processing sub3 r6 r3 r1
-1
['sub3', 'r6', 'r3', 'r1']
... @1442 0000010110100010  :  1110100110011001
                          1110100 110 011 001    size=16
processing 
-1
[]
processing boucle:
-1
['boucle:']
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @1458 0000010110110010  :  0100001011
                          0100 001 011    size=10
processing jumpif ge fin
-1
['jumpif', 'ge', 'fin']
... @1468 0000010110111100  :  1011101101111111000111101
                          1011 101 10 1111111000111101   size=25
processing add2i r1 1
-1
['add2i', 'r1', '1']
... @1493 0000010111010101  :  000100101
                          0001 001 0 1   size=9
processing sub2 r6 r4
-1
['sub2', 'r6', 'r4']
... @1502 0000010111011110  :  0010110100
                          0010 110 100    size=10
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @1512 0000010111101000  :  010111000
                          0101 110 0 0   size=9
processing jumpif sgt chgmtpixel
-1
['jumpif', 'sgt', 'chgmtpixel']
... @1521 0000010111110001  :  1011010100000000000000000
                          1011 010 10 0000000000000000   size=25
processing add2i r2 1
-1
['add2i', 'r2', '1']
... @1546 0000011000001010  :  000101001
                          0001 010 0 1   size=9
processing add2 r6 r5
-1
['add2', 'r6', 'r5']
... @1555 0000011000010011  :  0000110101
                          0000 110 101    size=10
processing chgmtpixel:
-1
['chgmtpixel:']
processing push 64 r1
-1
['push', '64', 'r1']
... @1565 0000011000011101  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @1578 0000011000101010  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @1591 0000011000110111  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r7
-1
['push', '64', 'r7']
... @1604 0000011001000100  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @1617 0000011001010001  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @1641 0000011001101001  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @1654 0000011001110110  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @1667 0000011010000011  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @1680 0000011010010000  :  1001101111001
                          10011 01 111 001    size=13
processing jump boucle
-1
['jump', 'boucle']
... @1693 0000011010011101  :  1010101111111011111111
                          1010 10 1111111011111111   size=22
processing fin:
-1
['fin:']
processing return
-1
['return']
... @1715 0000011010110011  :  1110001
                          1110001    size=7
processing drawend:
-1
['drawend:']
processing 
-1
[]
processing grandepente:
-1
['grandepente:']
processing ;mettons les bons registres
0
hey
[]
processing let r3 r5
-1
['let', 'r3', 'r5']
... @1722 0000011010111010  :  0110011101
                          0110 011 101    size=10
processing let r5 r6
-1
['let', 'r5', 'r6']
... @1732 0000011011000100  :  0110101110
                          0110 101 110    size=10
processing sub3 r6 r4 r2
-1
['sub3', 'r6', 'r4', 'r2']
... @1742 0000011011001110  :  1110100110100010
                          1110100 110 100 010    size=16
processing 
-1
[]
processing 
-1
[]
processing bouclebis:
-1
['bouclebis:']
processing cmp r2 r4
-1
['cmp', 'r2', 'r4']
... @1758 0000011011011110  :  0100010100
                          0100 010 100    size=10
processing jumpif ge finbis
-1
['jumpif', 'ge', 'finbis']
... @1768 0000011011101000  :  1011101100000000000000000
                          1011 101 10 0000000000000000   size=25
processing add2i r2 1
-1
['add2i', 'r2', '1']
... @1793 0000011100000001  :  000101001
                          0001 010 0 1   size=9
processing sub2 r6 r3
-1
['sub2', 'r6', 'r3']
... @1802 0000011100001010  :  0010110011
                          0010 110 011    size=10
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @1812 0000011100010100  :  010111000
                          0101 110 0 0   size=9
processing jumpif sgt chgmtpixelbis
-1
['jumpif', 'sgt', 'chgmtpixelbis']
... @1821 0000011100011101  :  1011010100000000000000000
                          1011 010 10 0000000000000000   size=25
processing add2i r1 1
-1
['add2i', 'r1', '1']
... @1846 0000011100110110  :  000100101
                          0001 001 0 1   size=9
processing add2 r6 r5
-1
['add2', 'r6', 'r5']
... @1855 0000011100111111  :  0000110101
                          0000 110 101    size=10
processing chgmtpixelbis:
-1
['chgmtpixelbis:']
processing push 64 r1
-1
['push', '64', 'r1']
... @1865 0000011101001001  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @1878 0000011101010110  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @1891 0000011101100011  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r7
-1
['push', '64', 'r7']
... @1904 0000011101110000  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @1917 0000011101111101  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @1941 0000011110010101  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @1954 0000011110100010  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @1967 0000011110101111  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @1980 0000011110111100  :  1001101111001
                          10011 01 111 001    size=13
processing jump bouclebis
-1
['jump', 'bouclebis']
... @1993 0000011111001001  :  1010101111111011111111
                          1010 10 1111111011111111   size=22
processing finbis:
-1
['finbis:']
processing 
-1
[]
processing pop 64 r4
-1
['pop', '64', 'r4']
... @2015 0000011111011111  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2028 0000011111101100  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2041 0000011111111001  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2054 0000100000000110  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2067 0000100000010011  :  1001101111000
                          10011 01 111 000    size=13
processing return
-1
['return']
... @2080 0000100000100000  :  1110001
                          1110001    size=7
processing 
-1
[]
processing 
-1
[]
processing negatif:
-1
['negatif:']
processing push 64 r0
-1
['push', '64', 'r0']
... @2087 0000100000100111  :  1110000111000
                          1110000 111 000    size=13
processing leti r0 0
-1
['leti', 'r0', '0']
... @2100 0000100000110100  :  011100000
                          0111 000 0 0   size=9
processing sub2 r0 r6
-1
['sub2', 'r0', 'r6']
... @2109 0000100000111101  :  0010000110
                          0010 000 110    size=10
processing cmp r5 r0
-1
['cmp', 'r5', 'r0']
... @2119 0000100001000111  :  0100101000
                          0100 101 000    size=10
processing jumpif slt grandepentebis
-1
['jumpif', 'slt', 'grandepentebis']
... @2129 0000100001010001  :  1011011100000000000000000
                          1011 011 10 0000000000000000   size=25
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2154 0000100001101010  :  1001101111000
                          10011 01 111 000    size=13
processing ;dans le huitieme octant
0
hey
[]
processing let r4 r6
-1
['let', 'r4', 'r6']
... @2167 0000100001110111  :  0110100110
                          0110 100 110    size=10
processing sub3 r6 r3 r1
-1
['sub3', 'r6', 'r3', 'r1']
... @2177 0000100010000001  :  1110100110011001
                          1110100 110 011 001    size=16
processing 
-1
[]
processing boucleter:
-1
['boucleter:']
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @2193 0000100010010001  :  0100001011
                          0100 001 011    size=10
processing jumpif ge finter
-1
['jumpif', 'ge', 'finter']
... @2203 0000100010011011  :  1011101100000000000000000
                          1011 101 10 0000000000000000   size=25
processing add2i r1 1
-1
['add2i', 'r1', '1']
... @2228 0000100010110100  :  000100101
                          0001 001 0 1   size=9
processing add2 r6 r4
-1
['add2', 'r6', 'r4']
... @2237 0000100010111101  :  0000110100
                          0000 110 100    size=10
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @2247 0000100011000111  :  010111000
                          0101 110 0 0   size=9
processing jumpif sgt chgmtpixelter
-1
['jumpif', 'sgt', 'chgmtpixelter']
... @2256 0000100011010000  :  1011010100000000000000000
                          1011 010 10 0000000000000000   size=25
processing sub2i r2 1
-1
['sub2i', 'r2', '1']
... @2281 0000100011101001  :  001101001
                          0011 010 0 1   size=9
processing add2 r6 r5
-1
['add2', 'r6', 'r5']
... @2290 0000100011110010  :  0000110101
                          0000 110 101    size=10
processing chgmtpixelter:
-1
['chgmtpixelter:']
processing push 64 r1
-1
['push', '64', 'r1']
... @2300 0000100011111100  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @2313 0000100100001001  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @2326 0000100100010110  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r7
-1
['push', '64', 'r7']
... @2339 0000100100100011  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @2352 0000100100110000  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @2376 0000100101001000  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2389 0000100101010101  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2402 0000100101100010  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2415 0000100101101111  :  1001101111001
                          10011 01 111 001    size=13
processing jump boucleter
-1
['jump', 'boucleter']
... @2428 0000100101111100  :  1010101111111011111111
                          1010 10 1111111011111111   size=22
processing finter:
-1
['finter:']
processing pop 64 r4
-1
['pop', '64', 'r4']
... @2450 0000100110010010  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2463 0000100110011111  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2476 0000100110101100  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2489 0000100110111001  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2502 0000100111000110  :  1001101111000
                          10011 01 111 000    size=13
processing return
-1
['return']
... @2515 0000100111010011  :  1110001
                          1110001    size=7
processing 
-1
[]
processing 
-1
[]
processing 
-1
[]
processing grandepentebis:
-1
['grandepentebis:']
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2522 0000100111011010  :  1001101111000
                          10011 01 111 000    size=13
processing ;dans le septieme octant
0
hey
[]
processing let r3 r5
-1
['let', 'r3', 'r5']
... @2535 0000100111100111  :  0110011101
                          0110 011 101    size=10
processing let r5 r6
-1
['let', 'r5', 'r6']
... @2545 0000100111110001  :  0110101110
                          0110 101 110    size=10
processing sub3 r6 r4 r2
-1
['sub3', 'r6', 'r4', 'r2']
... @2555 0000100111111011  :  1110100110100010
                          1110100 110 100 010    size=16
processing bouclequater:
-1
['bouclequater:']
processing cmp r4 r2
-1
['cmp', 'r4', 'r2']
... @2571 0000101000001011  :  0100100010
                          0100 100 010    size=10
processing jumpif ge finquater
-1
['jumpif', 'ge', 'finquater']
... @2581 0000101000010101  :  1011101100000000000000000
                          1011 101 10 0000000000000000   size=25
processing sub2i r2 1
-1
['sub2i', 'r2', '1']
... @2606 0000101000101110  :  001101001
                          0011 010 0 1   size=9
processing add2 r6 r3
-1
['add2', 'r6', 'r3']
... @2615 0000101000110111  :  0000110011
                          0000 110 011    size=10
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @2625 0000101001000001  :  010111000
                          0101 110 0 0   size=9
processing jumpif slt chgmtpixelquater
-1
['jumpif', 'slt', 'chgmtpixelquater']
... @2634 0000101001001010  :  1011011100000000000000000
                          1011 011 10 0000000000000000   size=25
processing add2i r1 1
-1
['add2i', 'r1', '1']
... @2659 0000101001100011  :  000100101
                          0001 001 0 1   size=9
processing add2 r6 r5
-1
['add2', 'r6', 'r5']
... @2668 0000101001101100  :  0000110101
                          0000 110 101    size=10
processing chgmtpixelquater:
-1
['chgmtpixelquater:']
processing push 64 r1
-1
['push', '64', 'r1']
... @2678 0000101001110110  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @2691 0000101010000011  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @2704 0000101010010000  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r7
-1
['push', '64', 'r7']
... @2717 0000101010011101  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @2730 0000101010101010  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @2754 0000101011000010  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2767 0000101011001111  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2780 0000101011011100  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2793 0000101011101001  :  1001101111001
                          10011 01 111 001    size=13
processing jump bouclequater
-1
['jump', 'bouclequater']
... @2806 0000101011110110  :  1010101111111011111111
                          1010 10 1111111011111111   size=22
processing finquater:
-1
['finquater:']
processing pop 64 r4
-1
['pop', '64', 'r4']
... @2828 0000101100001100  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2841 0000101100011001  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2854 0000101100100110  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2867 0000101100110011  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2880 0000101101000000  :  1001101111000
                          10011 01 111 000    size=13
processing return
-1
['return']
... @2893 0000101101001101  :  1110001
                          1110001    size=7
processing 
-1
[]
processing jump plotend
-1
['jump', 'plotend']
... @2900 0000101101010100  :  1010100000000000000000
                          1010 10 0000000000000000   size=22
processing plot:
-1
['plot:']
processing push 64 r1
-1
['push', '64', 'r1']
... @2922 0000101101101010  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @2935 0000101101110111  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @2948 0000101110000100  :  1110000111011
                          1110000 111 011    size=13
processing leti r3 1073350080
-1
['leti', 'r3', '1073350080']
... @2961 0000101110010001  :  011101111000111111111110100000010111000000
                          0111 011 110 00111111111110100000010111000000   size=42
processing sub2i r2 127
-1
['sub2i', 'r2', '127']
... @3003 0000101110111011  :  00110101001111111
                          0011 010 10 01111111   size=17
processing shift left r2 9
-1
['shift', 'left', 'r2', '9']
... @3020 0000101111001100  :  100000100001001
                          1000 0 010 0001001   size=15
processing sub2 r3 r2
-1
['sub2', 'r3', 'r2']
... @3035 0000101111011011  :  0010011010
                          0010 011 010    size=10
processing shift left r2 2
-1
['shift', 'left', 'r2', '2']
... @3045 0000101111100101  :  100000100000010
                          1000 0 010 0000010   size=15
processing sub2 r3 r2
-1
['sub2', 'r3', 'r2']
... @3060 0000101111110100  :  0010011010
                          0010 011 010    size=10
processing shift left r1 4
-1
['shift', 'left', 'r1', '4']
... @3070 0000101111111110  :  100000010000100
                          1000 0 001 0000100   size=15
processing add2 r3 r1
-1
['add2', 'r3', 'r1']
... @3085 0000110000001101  :  0000011001
                          0000 011 001    size=10
processing setctr a0 r3
-1
['setctr', 'a0', 'r3']
... @3095 0000110000010111  :  11011010011
                          110110 10 011    size=11
processing write a0 16 r0
-1
['write', 'a0', '16', 'r0']
... @3106 0000110000100010  :  11010010101000
                          110100 10 101 000    size=14
processing return
-1
['return']
... @3120 0000110000110000  :  1110001
                          1110001    size=7
processing pop 64 r3
-1
['pop', '64', 'r3']
... @3127 0000110000110111  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @3140 0000110001000100  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @3153 0000110001010001  :  1001101111001
                          10011 01 111 001    size=13
processing plotend:
-1
['plotend:']
processing 
-1
[]
processing 
-1
[]
processing jump skipputchar
-1
['jump', 'skipputchar']
... @3166 0000110001011110  :  1010100000000000000000
                          1010 10 0000000000000000   size=22
processing putchar:
-1
['putchar:']
processing     push 64 r0
-1
['push', '64', 'r0']
... @3188 0000110001110100  :  1110000111000
                          1110000 111 000    size=13
processing     push 64 r1
-1
['push', '64', 'r1']
... @3201 0000110010000001  :  1110000111001
                          1110000 111 001    size=13
processing     push 64 r2
-1
['push', '64', 'r2']
... @3214 0000110010001110  :  1110000111010
                          1110000 111 010    size=13
processing     push 64 r3
-1
['push', '64', 'r3']
... @3227 0000110010011011  :  1110000111011
                          1110000 111 011    size=13
processing     push 64 r4
-1
['push', '64', 'r4']
... @3240 0000110010101000  :  1110000111100
                          1110000 111 100    size=13
processing     push 64 r5
-1
['push', '64', 'r5']
... @3253 0000110010110101  :  1110000111101
                          1110000 111 101    size=13
processing     push 64 r6
-1
['push', '64', 'r6']
... @3266 0000110011000010  :  1110000111110
                          1110000 111 110    size=13
processing     push 64 r7
-1
['push', '64', 'r7']
... @3279 0000110011001111  :  1110000111111
                          1110000 111 111    size=13
processing 
-1
[]
processing     
-1
[]
processing     ; ===================================================
4
hey
[]
processing     
-1
[]
processing     ; On construit l'adresse du pixel en haut a gauche on le met dans r6
4
hey
[]
processing     
-1
[]
processing     add2i r2 8
-1
['add2i', 'r2', '8']
... @3292 0000110011011100  :  00010101000001000
                          0001 010 10 00001000   size=17
processing     
-1
[]
processing     leti r4 1073350080
-1
['leti', 'r4', '1073350080']
... @3309 0000110011101101  :  011110011000111111111110100000010111000000
                          0111 100 110 00111111111110100000010111000000   size=42
processing     sub2i r2 127
-1
['sub2i', 'r2', '127']
... @3351 0000110100010111  :  00110101001111111
                          0011 010 10 01111111   size=17
processing     shift left r2 9
-1
['shift', 'left', 'r2', '9']
... @3368 0000110100101000  :  100000100001001
                          1000 0 010 0001001   size=15
processing     sub2 r4 r2
-1
['sub2', 'r4', 'r2']
... @3383 0000110100110111  :  0010100010
                          0010 100 010    size=10
processing     shift left r2 2
-1
['shift', 'left', 'r2', '2']
... @3393 0000110101000001  :  100000100000010
                          1000 0 010 0000010   size=15
processing     sub2 r4 r2
-1
['sub2', 'r4', 'r2']
... @3408 0000110101010000  :  0010100010
                          0010 100 010    size=10
processing     shift left r1 4
-1
['shift', 'left', 'r1', '4']
... @3418 0000110101011010  :  100000010000100
                          1000 0 001 0000100   size=15
processing     add2 r4 r1
-1
['add2', 'r4', 'r1']
... @3433 0000110101101001  :  0000100001
                          0000 100 001    size=10
processing     
-1
[]
processing     setctr a0 r4
-1
['setctr', 'a0', 'r4']
... @3443 0000110101110011  :  11011010100
                          110110 10 100    size=11
processing     
-1
[]
processing     ; ===================================================
4
hey
[]
processing     
-1
[]
processing     ; On construit l'adresse du caractere à lire
4
hey
[]
processing     letiac r5 font
-1
['letiac', 'r5', 'font']
... @3454 0000110101111110  :  011110111000000000000000000000000000000000
                          0111 101 110 00000000000000000000000000000000   size=42
processing     shift l r3 6 ; On multiplie r3 par 64
17
hey
['shift', 'l', 'r3', '6']
... @3496 0000110110101000  :  100000110000110
                          1000 0 011 0000110   size=15
processing     add2 r3 r5 ; r3 pointe maintenant vers l'adresse du 1er bit de notre caractere
15
hey
['add2', 'r3', 'r5']
... @3511 0000110110110111  :  0000011101
                          0000 011 101    size=10
processing     
-1
[]
processing     setctr a1 r3
-1
['setctr', 'a1', 'r3']
... @3521 0000110111000001  :  11011011011
                          110110 11 011    size=11
processing     
-1
[]
processing     ; ==================================================== 
4
hey
[]
processing     
-1
[]
processing     ; On construit le saut à réaliser en fin de ligne dans r5
4
hey
[]
processing         
-1
[]
processing     leti r5 152
-1
['leti', 'r5', '152']
... @3532 0000110111001100  :  011110111000000000000000000000000010011000
                          0111 101 110 00000000000000000000000010011000   size=42
processing     shift l r5 4
-1
['shift', 'l', 'r5', '4']
... @3574 0000110111110110  :  100001010000100
                          1000 0 101 0000100   size=15
processing     
-1
[]
processing     
-1
[]
processing     ; ==================================================== 
4
hey
[]
processing     
-1
[]
processing     ; Boucle pour chaque ligne à écrire
4
hey
[]
processing     
-1
[]
processing     leti r1 0
-1
['leti', 'r1', '0']
... @3589 0000111000000101  :  011100100
                          0111 001 0 0   size=9
processing     
-1
[]
processing     boucle_carac_line_back:
-1
['boucle_carac_line_back:']
processing     cmpi r1 7    
-1
['cmpi', 'r1', '7']
... @3598 0000111000001110  :  01010011000000111
                          0101 001 10 00000111   size=17
processing     jumpif sgt boucle_carac_line
-1
['jumpif', 'sgt', 'boucle_carac_line']
... @3615 0000111000011111  :  1011010100000000000000000
                          1011 010 10 0000000000000000   size=25
processing         call putlc ; On ecrit une ligne du caractere
19
hey
['call', 'putlc']
... @3640 0000111000111000  :  110101100000000000000000
                          110101 10 0000000000000000   size=24
processing         
-1
[]
processing         ; On saute de 120 pixels
8
hey
[]
processing         getctr a0 r2
-1
['getctr', 'a0', 'r2']
... @3664 0000111001010000  :  11011110010
                          110111 10 010    size=11
processing         add2 r2 r5 ; On ajoute r5 = 120 * 16 dans r2
19
hey
['add2', 'r2', 'r5']
... @3675 0000111001011011  :  0000010101
                          0000 010 101    size=10
processing         setctr a0 r2
-1
['setctr', 'a0', 'r2']
... @3685 0000111001100101  :  11011010010
                          110110 10 010    size=11
processing         add2i r1 1
-1
['add2i', 'r1', '1']
... @3696 0000111001110000  :  000100101
                          0001 001 0 1   size=9
processing     jump boucle_carac_line_back    
-1
['jump', 'boucle_carac_line_back']
... @3705 0000111001111001  :  1010101111111101111111
                          1010 10 1111111101111111   size=22
processing     boucle_carac_line:
-1
['boucle_carac_line:']
processing     
-1
[]
processing     pop 64 r7
-1
['pop', '64', 'r7']
... @3727 0000111010001111  :  1001101111111
                          10011 01 111 111    size=13
processing     pop 64 r6
-1
['pop', '64', 'r6']
... @3740 0000111010011100  :  1001101111110
                          10011 01 111 110    size=13
processing     pop 64 r5
-1
['pop', '64', 'r5']
... @3753 0000111010101001  :  1001101111101
                          10011 01 111 101    size=13
processing     pop 64 r4
-1
['pop', '64', 'r4']
... @3766 0000111010110110  :  1001101111100
                          10011 01 111 100    size=13
processing     pop 64 r3
-1
['pop', '64', 'r3']
... @3779 0000111011000011  :  1001101111011
                          10011 01 111 011    size=13
processing     pop 64 r2
-1
['pop', '64', 'r2']
... @3792 0000111011010000  :  1001101111010
                          10011 01 111 010    size=13
processing     pop 64 r1
-1
['pop', '64', 'r1']
... @3805 0000111011011101  :  1001101111001
                          10011 01 111 001    size=13
processing     pop 64 r0
-1
['pop', '64', 'r0']
... @3818 0000111011101010  :  1001101111000
                          10011 01 111 000    size=13
processing     
-1
[]
processing     return
-1
['return']
... @3831 0000111011110111  :  1110001
                          1110001    size=7
processing     
-1
[]
processing     
-1
[]
processing ; ===================================================
0
hey
[]
processing 
-1
[]
processing ; Pour chaque ligne
0
hey
[]
processing 
-1
[]
processing putlc: 
-1
['putlc:']
processing 
-1
[]
processing     push 64 r1
-1
['push', '64', 'r1']
... @3838 0000111011111110  :  1110000111001
                          1110000 111 001    size=13
processing     push 64 r5
-1
['push', '64', 'r5']
... @3851 0000111100001011  :  1110000111101
                          1110000 111 101    size=13
processing     push 64 r6
-1
['push', '64', 'r6']
... @3864 0000111100011000  :  1110000111110
                          1110000 111 110    size=13
processing     
-1
[]
processing     readze a1 8 r5 ; On lit 8 pixels du caractere ie une ligne    
19
hey
['readze', 'a1', '8', 'r5']
... @3877 0000111100100101  :  1001011100101
                          10010 11 100 101    size=13
processing     leti r1 0
-1
['leti', 'r1', '0']
... @3890 0000111100110010  :  011100100
                          0111 001 0 0   size=9
processing     
-1
[]
processing     boucle_carac_pix_back:
-1
['boucle_carac_pix_back:']
processing     cmpi r1 8
-1
['cmpi', 'r1', '8']
... @3899 0000111100111011  :  01010011000001000
                          0101 001 10 00001000   size=17
processing     jumpif sgt boucle_carac_pix_end
-1
['jumpif', 'sgt', 'boucle_carac_pix_end']
... @3916 0000111101001100  :  1011010100000000000000000
                          1011 010 10 0000000000000000   size=25
processing         shift r r5 1        
-1
['shift', 'r', 'r5', '1']
... @3941 0000111101100101  :  100011011
                          1000 1 101 1   size=9
processing         jumpif nc carac_nowrite ; Si bit = 1 alors on ecrit
32
hey
['jumpif', 'nc', 'carac_nowrite']
... @3950 0000111101101110  :  1011101100000000000000000
                          1011 101 10 0000000000000000   size=25
processing             write a0 16 r0        
-1
['write', 'a0', '16', 'r0']
... @3975 0000111110000111  :  11010010101000
                          110100 10 101 000    size=14
processing         jump carac_writeend
-1
['jump', 'carac_writeend']
... @3989 0000111110010101  :  1010100000000000000000
                          1010 10 0000000000000000   size=22
processing         carac_nowrite: ; Sinon on ne fait rien et on déplace juste a0
23
hey
['carac_nowrite:']
processing             getctr a0 r6
-1
['getctr', 'a0', 'r6']
... @4011 0000111110101011  :  11011110110
                          110111 10 110    size=11
processing             add2i r6 16
-1
['add2i', 'r6', '16']
... @4022 0000111110110110  :  00011101000010000
                          0001 110 10 00010000   size=17
processing             setctr a0 r6      
-1
['setctr', 'a0', 'r6']
... @4039 0000111111000111  :  11011010110
                          110110 10 110    size=11
processing         
-1
[]
processing         carac_writeend:
-1
['carac_writeend:']
processing         
-1
[]
processing         add2i r1 1    
-1
['add2i', 'r1', '1']
... @4050 0000111111010010  :  000100101
                          0001 001 0 1   size=9
processing     jump boucle_carac_pix_back
-1
['jump', 'boucle_carac_pix_back']
... @4059 0000111111011011  :  1010101111111101001010
                          1010 10 1111111101001010   size=22
processing     boucle_carac_pix_end:
-1
['boucle_carac_pix_end:']
processing     
-1
[]
processing     
-1
[]
processing     pop 64 r6
-1
['pop', '64', 'r6']
... @4081 0000111111110001  :  1001101111110
                          10011 01 111 110    size=13
processing     pop 64 r5
-1
['pop', '64', 'r5']
... @4094 0000111111111110  :  1001101111101
                          10011 01 111 101    size=13
processing     pop 64 r1
-1
['pop', '64', 'r1']
... @4107 0001000000001011  :  1001101111001
                          10011 01 111 001    size=13
processing     
-1
[]
processing     return
-1
['return']
... @4120 0001000000011000  :  1110001
                          1110001    size=7
processing     
-1
[]
processing     
-1
[]
processing     
-1
[]
processing 
-1
[]
processing jump endfont
-1
['jump', 'endfont']
... @4127 0001000000011111  :  1010100000000000000000
                          1010 10 0000000000000000   size=22
processing font: ; Binary font
6
hey
['font:']
processing     load font.mem
-1
['load', 'font.mem']

size=8192
processing endfont:
-1
['endfont:']
processing 
-1
[]
processing skipputchar:
-1
['skipputchar:']

 PASS 2
processing 
-1
[]
processing 
-1
[]
processing leti r0 50
-1
['leti', 'r0', '50']
... @0 0000000000000000  :  01110001000110010
                          0111 000 10 00110010   size=17
processing leti r1 0
-1
['leti', 'r1', '0']
... @17 0000000000010001  :  011100100
                          0111 001 0 0   size=9
processing leti r2 0
-1
['leti', 'r2', '0']
... @26 0000000000011010  :  011101000
                          0111 010 0 0   size=9
processing leti r3 10
-1
['leti', 'r3', '10']
... @35 0000000000100011  :  01110111000001010
                          0111 011 10 00001010   size=17
processing leti r4 10
-1
['leti', 'r4', '10']
... @52 0000000000110100  :  01111001000001010
                          0111 100 10 00001010   size=17
processing 
-1
[]
processing call fill
-1
['call', 'fill']
... @69 0000000001000101  :  110101100000000100010110
                          110101 10 0000000100010110   size=24
processing 
-1
[]
processing leti r1 100
-1
['leti', 'r1', '100']
... @93 0000000001011101  :  01110011001100100
                          0111 001 10 01100100   size=17
processing leti r2 100
-1
['leti', 'r2', '100']
... @110 0000000001101110  :  01110101001100100
                          0111 010 10 01100100   size=17
processing leti r3 69
-1
['leti', 'r3', '69']
... @127 0000000001111111  :  01110111001000101
                          0111 011 10 01000101   size=17
processing 
-1
[]
processing call putchar
-1
['call', 'putchar']
... @144 0000000010010000  :  110101100000110001110100
                          110101 10 0000110001110100   size=24
processing 
-1
[]
processing leti r1 100
-1
['leti', 'r1', '100']
... @168 0000000010101000  :  01110011001100100
                          0111 001 10 01100100   size=17
processing leti r2 90
-1
['leti', 'r2', '90']
... @185 0000000010111001  :  01110101001011010
                          0111 010 10 01011010   size=17
processing leti r3 77
-1
['leti', 'r3', '77']
... @202 0000000011001010  :  01110111001001101
                          0111 011 10 01001101   size=17
processing 
-1
[]
processing call putchar
-1
['call', 'putchar']
... @219 0000000011011011  :  110101100000110001110100
                          110101 10 0000110001110100   size=24
processing 
-1
[]
processing jump -13
-1
['jump', '-13']
... @243 0000000011110011  :  1010011110011
                          1010 0 11110011   size=13
processing 
-1
[]
processing jump skipfill
-1
['jump', 'skipfill']
... @256 0000000100000000  :  1010100000001011111100
                          1010 10 0000001011111100   size=22
processing fill:
-1
['fill:']
processing push 64 r0
-1
['push', '64', 'r0']
... @278 0000000100010110  :  1110000111000
                          1110000 111 000    size=13
processing push 64 r1
-1
['push', '64', 'r1']
... @291 0000000100100011  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @304 0000000100110000  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @317 0000000100111101  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r4
-1
['push', '64', 'r4']
... @330 0000000101001010  :  1110000111100
                          1110000 111 100    size=13
processing push 64 r5
-1
['push', '64', 'r5']
... @343 0000000101010111  :  1110000111101
                          1110000 111 101    size=13
processing push 64 r6
-1
['push', '64', 'r6']
... @356 0000000101100100  :  1110000111110
                          1110000 111 110    size=13
processing 
-1
[]
processing ;on choisit la plus petite abscisse
0
hey
[]
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @369 0000000101110001  :  0100001011
                          0100 001 011    size=10
processing jumpif lt echange
-1
['jumpif', 'lt', 'echange']
... @379 0000000101111011  :  1011110100000000000011110
                          1011 110 10 0000000000011110   size=25
processing let r5 r1
-1
['let', 'r5', 'r1']
... @404 0000000110010100  :  0110101001
                          0110 101 001    size=10
processing let r1 r3
-1
['let', 'r1', 'r3']
... @414 0000000110011110  :  0110001011
                          0110 001 011    size=10
processing let r3 r5
-1
['let', 'r3', 'r5']
... @424 0000000110101000  :  0110011101
                          0110 011 101    size=10
processing echange:
-1
['echange:']
processing 
-1
[]
processing 
-1
[]
processing ;on choisit la plus grande ordonnee
0
hey
[]
processing cmp r2 r4
-1
['cmp', 'r2', 'r4']
... @434 0000000110110010  :  0100010100
                          0100 010 100    size=10
processing jumpif gt echangebis
-1
['jumpif', 'gt', 'echangebis']
... @444 0000000110111100  :  1011100100000000000011110
                          1011 100 10 0000000000011110   size=25
processing let r5 r2
-1
['let', 'r5', 'r2']
... @469 0000000111010101  :  0110101010
                          0110 101 010    size=10
processing let r2 r4
-1
['let', 'r2', 'r4']
... @479 0000000111011111  :  0110010100
                          0110 010 100    size=10
processing let r4 r5 ; r4 est pour l'instant inutile
10
hey
['let', 'r4', 'r5']
... @489 0000000111101001  :  0110100101
                          0110 100 101    size=10
processing echangebis:
-1
['echangebis:']
processing 
-1
[]
processing sub2 r3 r1 ; r3 contient la largeur du rectangle
11
hey
['sub2', 'r3', 'r1']
... @499 0000000111110011  :  0010011001
                          0010 011 001    size=10
processing add2i r3 1
-1
['add2i', 'r3', '1']
... @509 0000000111111101  :  000101101
                          0001 011 0 1   size=9
processing sub3 r5 r2 r4
-1
['sub3', 'r5', 'r2', 'r4']
... @518 0000001000000110  :  1110100101010100
                          1110100 101 010 100    size=16
processing add2i r5 1; r5 contient le nombre de lignes a tracer (voir si le 1 est utile)
10
hey
['add2i', 'r5', '1']
... @534 0000001000010110  :  000110101
                          0001 101 0 1   size=9
processing leti r4 160
-1
['leti', 'r4', '160']
... @543 0000001000011111  :  011110011000000000000000000000000010100000
                          0111 100 110 00000000000000000000000010100000   size=42
processing sub2 r4 r3; r4 contient le nombre de pixels a sauter avant d'ecrire a nouveau
10
hey
['sub2', 'r4', 'r3']
... @585 0000001001001001  :  0010100011
                          0010 100 011    size=10
processing shift left r4 4 ; nombre de bits a sauter
16
hey
['shift', 'left', 'r4', '4']
... @595 0000001001010011  :  100001000000100
                          1000 0 100 0000100   size=15
processing 
-1
[]
processing ;fin de la preparation calculatoire
0
hey
[]
processing 
-1
[]
processing 
-1
[]
processing ;partie mettant dans r6 l'adresse du premier point
0
hey
[]
processing leti r6 1073350080
-1
['leti', 'r6', '1073350080']
... @610 0000001001100010  :  011111011000111111111110100000010111000000
                          0111 110 110 00111111111110100000010111000000   size=42
processing sub2i r2 127
-1
['sub2i', 'r2', '127']
... @652 0000001010001100  :  00110101001111111
                          0011 010 10 01111111   size=17
processing shift left r2 9
-1
['shift', 'left', 'r2', '9']
... @669 0000001010011101  :  100000100001001
                          1000 0 010 0001001   size=15
processing sub2 r6 r2
-1
['sub2', 'r6', 'r2']
... @684 0000001010101100  :  0010110010
                          0010 110 010    size=10
processing shift left r2 2
-1
['shift', 'left', 'r2', '2']
... @694 0000001010110110  :  100000100000010
                          1000 0 010 0000010   size=15
processing sub2 r6 r2
-1
['sub2', 'r6', 'r2']
... @709 0000001011000101  :  0010110010
                          0010 110 010    size=10
processing shift left r1 4
-1
['shift', 'left', 'r1', '4']
... @719 0000001011001111  :  100000010000100
                          1000 0 001 0000100   size=15
processing add2 r6 r1
-1
['add2', 'r6', 'r1']
... @734 0000001011011110  :  0000110001
                          0000 110 001    size=10
processing setctr a0 r6
-1
['setctr', 'a0', 'r6']
... @744 0000001011101000  :  11011010110
                          110110 10 110    size=11
processing 
-1
[]
processing boucley:
-1
['boucley:']
processing cmpi r5 1 ;on compte le nombre de ligne qui reste a tracer
10
hey
['cmpi', 'r5', '1']
... @755 0000001011110011  :  010110101
                          0101 101 0 1   size=9
processing jumpif slt fin
-1
['jumpif', 'slt', 'fin']
... @764 0000001011111100  :  1011011100000001110011110
                          1011 011 10 0000001110011110   size=25
processing sub2i r5 1
-1
['sub2i', 'r5', '1']
... @789 0000001100010101  :  001110101
                          0011 101 0 1   size=9
processing 
-1
[]
processing let r1 r3
-1
['let', 'r1', 'r3']
... @798 0000001100011110  :  0110001011
                          0110 001 011    size=10
processing bouclex:
-1
['bouclex:']
processing cmpi r3 1 ; on compte le nombre de colonne a remplir
10
hey
['cmpi', 'r3', '1']
... @808 0000001100101000  :  010101101
                          0101 011 0 1   size=9
processing jumpif slt finligne
-1
['jumpif', 'slt', 'finligne']
... @817 0000001100110001  :  1011011100000000000101101
                          1011 011 10 0000000000101101   size=25
processing sub2i r3 1
-1
['sub2i', 'r3', '1']
... @842 0000001101001010  :  001101101
                          0011 011 0 1   size=9
processing write a0 16 r0 ; on ecrit la ligne
15
hey
['write', 'a0', '16', 'r0']
... @851 0000001101010011  :  11010010101000
                          110100 10 101 000    size=14
processing jump bouclex
-1
['jump', 'bouclex']
... @865 0000001101100001  :  1010101111111110110001
                          1010 10 1111111110110001   size=22
processing finligne:
-1
['finligne:']
processing let r3 r1
-1
['let', 'r3', 'r1']
... @887 0000001101110111  :  0110011001
                          0110 011 001    size=10
processing 
-1
[]
processing getctr a0 r6
-1
['getctr', 'a0', 'r6']
... @897 0000001110000001  :  11011110110
                          110111 10 110    size=11
processing add2 r6 r4
-1
['add2', 'r6', 'r4']
... @908 0000001110001100  :  0000110100
                          0000 110 100    size=10
processing setctr a0 r6 ; saut de la ligne
13
hey
['setctr', 'a0', 'r6']
... @918 0000001110010110  :  11011010110
                          110110 10 110    size=11
processing 
-1
[]
processing jump boucley
-1
['jump', 'boucley']
... @929 0000001110100001  :  1010101111111100111100
                          1010 10 1111111100111100   size=22
processing 
-1
[]
processing pop 64 r6
-1
['pop', '64', 'r6']
... @951 0000001110110111  :  1001101111110
                          10011 01 111 110    size=13
processing pop 64 r5
-1
['pop', '64', 'r5']
... @964 0000001111000100  :  1001101111101
                          10011 01 111 101    size=13
processing pop 64 r4
-1
['pop', '64', 'r4']
... @977 0000001111010001  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @990 0000001111011110  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @1003 0000001111101011  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @1016 0000001111111000  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @1029 0000010000000101  :  1001101111000
                          10011 01 111 000    size=13
processing 
-1
[]
processing fin:
-1
['fin:']
processing skipfill:
-1
['skipfill:']
processing 
-1
[]
processing 
-1
[]
processing jump drawend
-1
['jump', 'drawend']
... @1042 0000010000010010  :  1010100000001010010010
                          1010 10 0000001010010010   size=22
processing draw:
-1
['draw:']
processing   push 64 r0
-1
['push', '64', 'r0']
... @1064 0000010000101000  :  1110000111000
                          1110000 111 000    size=13
processing   push 64 r1
-1
['push', '64', 'r1']
... @1077 0000010000110101  :  1110000111001
                          1110000 111 001    size=13
processing   push 64 r2
-1
['push', '64', 'r2']
... @1090 0000010001000010  :  1110000111010
                          1110000 111 010    size=13
processing   push 64 r3
-1
['push', '64', 'r3']
... @1103 0000010001001111  :  1110000111011
                          1110000 111 011    size=13
processing   push 64 r4
-1
['push', '64', 'r4']
... @1116 0000010001011100  :  1110000111100
                          1110000 111 100    size=13
processing 
-1
[]
processing ;mettons les points dans le bon sens
0
hey
[]
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @1129 0000010001101001  :  0100001011
                          0100 001 011    size=10
processing jumpif lt echangedraw
-1
['jumpif', 'lt', 'echangedraw']
... @1139 0000010001110011  :  1011110100000000000111100
                          1011 110 10 0000000000111100   size=25
processing   let r5 r1
-1
['let', 'r5', 'r1']
... @1164 0000010010001100  :  0110101001
                          0110 101 001    size=10
processing   let r1 r3
-1
['let', 'r1', 'r3']
... @1174 0000010010010110  :  0110001011
                          0110 001 011    size=10
processing   let r3 r5
-1
['let', 'r3', 'r5']
... @1184 0000010010100000  :  0110011101
                          0110 011 101    size=10
processing   let r5 r2
-1
['let', 'r5', 'r2']
... @1194 0000010010101010  :  0110101010
                          0110 101 010    size=10
processing   let r2 r4
-1
['let', 'r2', 'r4']
... @1204 0000010010110100  :  0110010100
                          0110 010 100    size=10
processing   let r4 r5
-1
['let', 'r4', 'r5']
... @1214 0000010010111110  :  0110100101
                          0110 100 101    size=10
processing echangedraw:
-1
['echangedraw:']
processing 
-1
[]
processing ;ceci prepare le premier point
0
hey
[]
processing sub3 r5 r3 r1
-1
['sub3', 'r5', 'r3', 'r1']
... @1224 0000010011001000  :  1110100101011001
                          1110100 101 011 001    size=16
processing shift left r5 1 ;r5 contient dx
16
hey
['shift', 'left', 'r5', '1']
... @1240 0000010011011000  :  100001011
                          1000 0 101 1   size=9
processing sub3 r6 r4 r2
-1
['sub3', 'r6', 'r4', 'r2']
... @1249 0000010011100001  :  1110100110100010
                          1110100 110 100 010    size=16
processing shift left r6 1 ;r6 contient dy
16
hey
['shift', 'left', 'r6', '1']
... @1265 0000010011110001  :  100001101
                          1000 0 110 1   size=9
processing 
-1
[]
processing push 64 r7
-1
['push', '64', 'r7']
... @1274 0000010011111010  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @1287 0000010100000111  :  110101100000101101101010
                          110101 10 0000101101101010   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @1311 0000010100011111  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @1324 0000010100101100  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @1337 0000010100111001  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @1350 0000010101000110  :  1001101111001
                          10011 01 111 001    size=13
processing 
-1
[]
processing 
-1
[]
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @1363 0000010101010011  :  010111000
                          0101 110 0 0   size=9
processing jumpif slt negatif
-1
['jumpif', 'slt', 'negatif']
... @1372 0000010101011100  :  1011011100000001010110010
                          1011 011 10 0000001010110010   size=25
processing cmp r5 r6
-1
['cmp', 'r5', 'r6']
... @1397 0000010101110101  :  0100101110
                          0100 101 110    size=10
processing jumpif slt grandepente
-1
['jumpif', 'slt', 'grandepente']
... @1407 0000010101111111  :  1011011100000000100100010
                          1011 011 10 0000000100100010   size=25
processing 
-1
[]
processing 
-1
[]
processing ;on met les donnees dans les bons registres pour ce cas
0
hey
[]
processing let r4 r6
-1
['let', 'r4', 'r6']
... @1432 0000010110011000  :  0110100110
                          0110 100 110    size=10
processing sub3 r6 r3 r1
-1
['sub3', 'r6', 'r3', 'r1']
... @1442 0000010110100010  :  1110100110011001
                          1110100 110 011 001    size=16
processing 
-1
[]
processing boucle:
-1
['boucle:']
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @1458 0000010110110010  :  0100001011
                          0100 001 011    size=10
processing jumpif ge fin
-1
['jumpif', 'ge', 'fin']
... @1468 0000010110111100  :  1011101101111111000111101
                          1011 101 10 1111111000111101   size=25
processing add2i r1 1
-1
['add2i', 'r1', '1']
... @1493 0000010111010101  :  000100101
                          0001 001 0 1   size=9
processing sub2 r6 r4
-1
['sub2', 'r6', 'r4']
... @1502 0000010111011110  :  0010110100
                          0010 110 100    size=10
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @1512 0000010111101000  :  010111000
                          0101 110 0 0   size=9
processing jumpif sgt chgmtpixel
-1
['jumpif', 'sgt', 'chgmtpixel']
... @1521 0000010111110001  :  1011010100000000000010011
                          1011 010 10 0000000000010011   size=25
processing add2i r2 1
-1
['add2i', 'r2', '1']
... @1546 0000011000001010  :  000101001
                          0001 010 0 1   size=9
processing add2 r6 r5
-1
['add2', 'r6', 'r5']
... @1555 0000011000010011  :  0000110101
                          0000 110 101    size=10
processing chgmtpixel:
-1
['chgmtpixel:']
processing push 64 r1
-1
['push', '64', 'r1']
... @1565 0000011000011101  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @1578 0000011000101010  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @1591 0000011000110111  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r7
-1
['push', '64', 'r7']
... @1604 0000011001000100  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @1617 0000011001010001  :  110101100000101101101010
                          110101 10 0000101101101010   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @1641 0000011001101001  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @1654 0000011001110110  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @1667 0000011010000011  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @1680 0000011010010000  :  1001101111001
                          10011 01 111 001    size=13
processing jump boucle
-1
['jump', 'boucle']
... @1693 0000011010011101  :  1010101111111011111111
                          1010 10 1111111011111111   size=22
processing fin:
-1
['fin:']
processing return
-1
['return']
... @1715 0000011010110011  :  1110001
                          1110001    size=7
processing drawend:
-1
['drawend:']
processing 
-1
[]
processing grandepente:
-1
['grandepente:']
processing ;mettons les bons registres
0
hey
[]
processing let r3 r5
-1
['let', 'r3', 'r5']
... @1722 0000011010111010  :  0110011101
                          0110 011 101    size=10
processing let r5 r6
-1
['let', 'r5', 'r6']
... @1732 0000011011000100  :  0110101110
                          0110 101 110    size=10
processing sub3 r6 r4 r2
-1
['sub3', 'r6', 'r4', 'r2']
... @1742 0000011011001110  :  1110100110100010
                          1110100 110 100 010    size=16
processing 
-1
[]
processing 
-1
[]
processing bouclebis:
-1
['bouclebis:']
processing cmp r2 r4
-1
['cmp', 'r2', 'r4']
... @1758 0000011011011110  :  0100010100
                          0100 010 100    size=10
processing jumpif ge finbis
-1
['jumpif', 'ge', 'finbis']
... @1768 0000011011101000  :  1011101100000000011011110
                          1011 101 10 0000000011011110   size=25
processing add2i r2 1
-1
['add2i', 'r2', '1']
... @1793 0000011100000001  :  000101001
                          0001 010 0 1   size=9
processing sub2 r6 r3
-1
['sub2', 'r6', 'r3']
... @1802 0000011100001010  :  0010110011
                          0010 110 011    size=10
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @1812 0000011100010100  :  010111000
                          0101 110 0 0   size=9
processing jumpif sgt chgmtpixelbis
-1
['jumpif', 'sgt', 'chgmtpixelbis']
... @1821 0000011100011101  :  1011010100000000000010011
                          1011 010 10 0000000000010011   size=25
processing add2i r1 1
-1
['add2i', 'r1', '1']
... @1846 0000011100110110  :  000100101
                          0001 001 0 1   size=9
processing add2 r6 r5
-1
['add2', 'r6', 'r5']
... @1855 0000011100111111  :  0000110101
                          0000 110 101    size=10
processing chgmtpixelbis:
-1
['chgmtpixelbis:']
processing push 64 r1
-1
['push', '64', 'r1']
... @1865 0000011101001001  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @1878 0000011101010110  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @1891 0000011101100011  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r7
-1
['push', '64', 'r7']
... @1904 0000011101110000  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @1917 0000011101111101  :  110101100000101101101010
                          110101 10 0000101101101010   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @1941 0000011110010101  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @1954 0000011110100010  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @1967 0000011110101111  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @1980 0000011110111100  :  1001101111001
                          10011 01 111 001    size=13
processing jump bouclebis
-1
['jump', 'bouclebis']
... @1993 0000011111001001  :  1010101111111011111111
                          1010 10 1111111011111111   size=22
processing finbis:
-1
['finbis:']
processing 
-1
[]
processing pop 64 r4
-1
['pop', '64', 'r4']
... @2015 0000011111011111  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2028 0000011111101100  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2041 0000011111111001  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2054 0000100000000110  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2067 0000100000010011  :  1001101111000
                          10011 01 111 000    size=13
processing return
-1
['return']
... @2080 0000100000100000  :  1110001
                          1110001    size=7
processing 
-1
[]
processing 
-1
[]
processing negatif:
-1
['negatif:']
processing push 64 r0
-1
['push', '64', 'r0']
... @2087 0000100000100111  :  1110000111000
                          1110000 111 000    size=13
processing leti r0 0
-1
['leti', 'r0', '0']
... @2100 0000100000110100  :  011100000
                          0111 000 0 0   size=9
processing sub2 r0 r6
-1
['sub2', 'r0', 'r6']
... @2109 0000100000111101  :  0010000110
                          0010 000 110    size=10
processing cmp r5 r0
-1
['cmp', 'r5', 'r0']
... @2119 0000100001000111  :  0100101000
                          0100 101 000    size=10
processing jumpif slt grandepentebis
-1
['jumpif', 'slt', 'grandepentebis']
... @2129 0000100001010001  :  1011011100000000101110000
                          1011 011 10 0000000101110000   size=25
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2154 0000100001101010  :  1001101111000
                          10011 01 111 000    size=13
processing ;dans le huitieme octant
0
hey
[]
processing let r4 r6
-1
['let', 'r4', 'r6']
... @2167 0000100001110111  :  0110100110
                          0110 100 110    size=10
processing sub3 r6 r3 r1
-1
['sub3', 'r6', 'r3', 'r1']
... @2177 0000100010000001  :  1110100110011001
                          1110100 110 011 001    size=16
processing 
-1
[]
processing boucleter:
-1
['boucleter:']
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @2193 0000100010010001  :  0100001011
                          0100 001 011    size=10
processing jumpif ge finter
-1
['jumpif', 'ge', 'finter']
... @2203 0000100010011011  :  1011101100000000011011110
                          1011 101 10 0000000011011110   size=25
processing add2i r1 1
-1
['add2i', 'r1', '1']
... @2228 0000100010110100  :  000100101
                          0001 001 0 1   size=9
processing add2 r6 r4
-1
['add2', 'r6', 'r4']
... @2237 0000100010111101  :  0000110100
                          0000 110 100    size=10
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @2247 0000100011000111  :  010111000
                          0101 110 0 0   size=9
processing jumpif sgt chgmtpixelter
-1
['jumpif', 'sgt', 'chgmtpixelter']
... @2256 0000100011010000  :  1011010100000000000010011
                          1011 010 10 0000000000010011   size=25
processing sub2i r2 1
-1
['sub2i', 'r2', '1']
... @2281 0000100011101001  :  001101001
                          0011 010 0 1   size=9
processing add2 r6 r5
-1
['add2', 'r6', 'r5']
... @2290 0000100011110010  :  0000110101
                          0000 110 101    size=10
processing chgmtpixelter:
-1
['chgmtpixelter:']
processing push 64 r1
-1
['push', '64', 'r1']
... @2300 0000100011111100  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @2313 0000100100001001  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @2326 0000100100010110  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r7
-1
['push', '64', 'r7']
... @2339 0000100100100011  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @2352 0000100100110000  :  110101100000101101101010
                          110101 10 0000101101101010   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @2376 0000100101001000  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2389 0000100101010101  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2402 0000100101100010  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2415 0000100101101111  :  1001101111001
                          10011 01 111 001    size=13
processing jump boucleter
-1
['jump', 'boucleter']
... @2428 0000100101111100  :  1010101111111011111111
                          1010 10 1111111011111111   size=22
processing finter:
-1
['finter:']
processing pop 64 r4
-1
['pop', '64', 'r4']
... @2450 0000100110010010  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2463 0000100110011111  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2476 0000100110101100  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2489 0000100110111001  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2502 0000100111000110  :  1001101111000
                          10011 01 111 000    size=13
processing return
-1
['return']
... @2515 0000100111010011  :  1110001
                          1110001    size=7
processing 
-1
[]
processing 
-1
[]
processing 
-1
[]
processing grandepentebis:
-1
['grandepentebis:']
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2522 0000100111011010  :  1001101111000
                          10011 01 111 000    size=13
processing ;dans le septieme octant
0
hey
[]
processing let r3 r5
-1
['let', 'r3', 'r5']
... @2535 0000100111100111  :  0110011101
                          0110 011 101    size=10
processing let r5 r6
-1
['let', 'r5', 'r6']
... @2545 0000100111110001  :  0110101110
                          0110 101 110    size=10
processing sub3 r6 r4 r2
-1
['sub3', 'r6', 'r4', 'r2']
... @2555 0000100111111011  :  1110100110100010
                          1110100 110 100 010    size=16
processing bouclequater:
-1
['bouclequater:']
processing cmp r4 r2
-1
['cmp', 'r4', 'r2']
... @2571 0000101000001011  :  0100100010
                          0100 100 010    size=10
processing jumpif ge finquater
-1
['jumpif', 'ge', 'finquater']
... @2581 0000101000010101  :  1011101100000000011011110
                          1011 101 10 0000000011011110   size=25
processing sub2i r2 1
-1
['sub2i', 'r2', '1']
... @2606 0000101000101110  :  001101001
                          0011 010 0 1   size=9
processing add2 r6 r3
-1
['add2', 'r6', 'r3']
... @2615 0000101000110111  :  0000110011
                          0000 110 011    size=10
processing cmpi r6 0
-1
['cmpi', 'r6', '0']
... @2625 0000101001000001  :  010111000
                          0101 110 0 0   size=9
processing jumpif slt chgmtpixelquater
-1
['jumpif', 'slt', 'chgmtpixelquater']
... @2634 0000101001001010  :  1011011100000000000010011
                          1011 011 10 0000000000010011   size=25
processing add2i r1 1
-1
['add2i', 'r1', '1']
... @2659 0000101001100011  :  000100101
                          0001 001 0 1   size=9
processing add2 r6 r5
-1
['add2', 'r6', 'r5']
... @2668 0000101001101100  :  0000110101
                          0000 110 101    size=10
processing chgmtpixelquater:
-1
['chgmtpixelquater:']
processing push 64 r1
-1
['push', '64', 'r1']
... @2678 0000101001110110  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @2691 0000101010000011  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @2704 0000101010010000  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r7
-1
['push', '64', 'r7']
... @2717 0000101010011101  :  1110000111111
                          1110000 111 111    size=13
processing call plot
-1
['call', 'plot']
... @2730 0000101010101010  :  110101100000101101101010
                          110101 10 0000101101101010   size=24
processing pop 64 r7
-1
['pop', '64', 'r7']
... @2754 0000101011000010  :  1001101111111
                          10011 01 111 111    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2767 0000101011001111  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2780 0000101011011100  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2793 0000101011101001  :  1001101111001
                          10011 01 111 001    size=13
processing jump bouclequater
-1
['jump', 'bouclequater']
... @2806 0000101011110110  :  1010101111111011111111
                          1010 10 1111111011111111   size=22
processing finquater:
-1
['finquater:']
processing pop 64 r4
-1
['pop', '64', 'r4']
... @2828 0000101100001100  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @2841 0000101100011001  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @2854 0000101100100110  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @2867 0000101100110011  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @2880 0000101101000000  :  1001101111000
                          10011 01 111 000    size=13
processing return
-1
['return']
... @2893 0000101101001101  :  1110001
                          1110001    size=7
processing 
-1
[]
processing jump plotend
-1
['jump', 'plotend']
... @2900 0000101101010100  :  1010100000000011110100
                          1010 10 0000000011110100   size=22
processing plot:
-1
['plot:']
processing push 64 r1
-1
['push', '64', 'r1']
... @2922 0000101101101010  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @2935 0000101101110111  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @2948 0000101110000100  :  1110000111011
                          1110000 111 011    size=13
processing leti r3 1073350080
-1
['leti', 'r3', '1073350080']
... @2961 0000101110010001  :  011101111000111111111110100000010111000000
                          0111 011 110 00111111111110100000010111000000   size=42
processing sub2i r2 127
-1
['sub2i', 'r2', '127']
... @3003 0000101110111011  :  00110101001111111
                          0011 010 10 01111111   size=17
processing shift left r2 9
-1
['shift', 'left', 'r2', '9']
... @3020 0000101111001100  :  100000100001001
                          1000 0 010 0001001   size=15
processing sub2 r3 r2
-1
['sub2', 'r3', 'r2']
... @3035 0000101111011011  :  0010011010
                          0010 011 010    size=10
processing shift left r2 2
-1
['shift', 'left', 'r2', '2']
... @3045 0000101111100101  :  100000100000010
                          1000 0 010 0000010   size=15
processing sub2 r3 r2
-1
['sub2', 'r3', 'r2']
... @3060 0000101111110100  :  0010011010
                          0010 011 010    size=10
processing shift left r1 4
-1
['shift', 'left', 'r1', '4']
... @3070 0000101111111110  :  100000010000100
                          1000 0 001 0000100   size=15
processing add2 r3 r1
-1
['add2', 'r3', 'r1']
... @3085 0000110000001101  :  0000011001
                          0000 011 001    size=10
processing setctr a0 r3
-1
['setctr', 'a0', 'r3']
... @3095 0000110000010111  :  11011010011
                          110110 10 011    size=11
processing write a0 16 r0
-1
['write', 'a0', '16', 'r0']
... @3106 0000110000100010  :  11010010101000
                          110100 10 101 000    size=14
processing return
-1
['return']
... @3120 0000110000110000  :  1110001
                          1110001    size=7
processing pop 64 r3
-1
['pop', '64', 'r3']
... @3127 0000110000110111  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @3140 0000110001000100  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @3153 0000110001010001  :  1001101111001
                          10011 01 111 001    size=13
processing plotend:
-1
['plotend:']
processing 
-1
[]
processing 
-1
[]
processing jump skipputchar
-1
['jump', 'skipputchar']
... @3166 0000110001011110  :  1010100010001111000001
                          1010 10 0010001111000001   size=22
processing putchar:
-1
['putchar:']
processing     push 64 r0
-1
['push', '64', 'r0']
... @3188 0000110001110100  :  1110000111000
                          1110000 111 000    size=13
processing     push 64 r1
-1
['push', '64', 'r1']
... @3201 0000110010000001  :  1110000111001
                          1110000 111 001    size=13
processing     push 64 r2
-1
['push', '64', 'r2']
... @3214 0000110010001110  :  1110000111010
                          1110000 111 010    size=13
processing     push 64 r3
-1
['push', '64', 'r3']
... @3227 0000110010011011  :  1110000111011
                          1110000 111 011    size=13
processing     push 64 r4
-1
['push', '64', 'r4']
... @3240 0000110010101000  :  1110000111100
                          1110000 111 100    size=13
processing     push 64 r5
-1
['push', '64', 'r5']
... @3253 0000110010110101  :  1110000111101
                          1110000 111 101    size=13
processing     push 64 r6
-1
['push', '64', 'r6']
... @3266 0000110011000010  :  1110000111110
                          1110000 111 110    size=13
processing     push 64 r7
-1
['push', '64', 'r7']
... @3279 0000110011001111  :  1110000111111
                          1110000 111 111    size=13
processing 
-1
[]
processing     
-1
[]
processing     ; ===================================================
4
hey
[]
processing     
-1
[]
processing     ; On construit l'adresse du pixel en haut a gauche on le met dans r6
4
hey
[]
processing     
-1
[]
processing     add2i r2 8
-1
['add2i', 'r2', '8']
... @3292 0000110011011100  :  00010101000001000
                          0001 010 10 00001000   size=17
processing     
-1
[]
processing     leti r4 1073350080
-1
['leti', 'r4', '1073350080']
... @3309 0000110011101101  :  011110011000111111111110100000010111000000
                          0111 100 110 00111111111110100000010111000000   size=42
processing     sub2i r2 127
-1
['sub2i', 'r2', '127']
... @3351 0000110100010111  :  00110101001111111
                          0011 010 10 01111111   size=17
processing     shift left r2 9
-1
['shift', 'left', 'r2', '9']
... @3368 0000110100101000  :  100000100001001
                          1000 0 010 0001001   size=15
processing     sub2 r4 r2
-1
['sub2', 'r4', 'r2']
... @3383 0000110100110111  :  0010100010
                          0010 100 010    size=10
processing     shift left r2 2
-1
['shift', 'left', 'r2', '2']
... @3393 0000110101000001  :  100000100000010
                          1000 0 010 0000010   size=15
processing     sub2 r4 r2
-1
['sub2', 'r4', 'r2']
... @3408 0000110101010000  :  0010100010
                          0010 100 010    size=10
processing     shift left r1 4
-1
['shift', 'left', 'r1', '4']
... @3418 0000110101011010  :  100000010000100
                          1000 0 001 0000100   size=15
processing     add2 r4 r1
-1
['add2', 'r4', 'r1']
... @3433 0000110101101001  :  0000100001
                          0000 100 001    size=10
processing     
-1
[]
processing     setctr a0 r4
-1
['setctr', 'a0', 'r4']
... @3443 0000110101110011  :  11011010100
                          110110 10 100    size=11
processing     
-1
[]
processing     ; ===================================================
4
hey
[]
processing     
-1
[]
processing     ; On construit l'adresse du caractere à lire
4
hey
[]
processing     letiac r5 font
-1
['letiac', 'r5', 'font']
... @3454 0000110101111110  :  011110111000000000000000000001000000110101
                          0111 101 110 00000000000000000001000000110101   size=42
processing     shift l r3 6 ; On multiplie r3 par 64
17
hey
['shift', 'l', 'r3', '6']
... @3496 0000110110101000  :  100000110000110
                          1000 0 011 0000110   size=15
processing     add2 r3 r5 ; r3 pointe maintenant vers l'adresse du 1er bit de notre caractere
15
hey
['add2', 'r3', 'r5']
... @3511 0000110110110111  :  0000011101
                          0000 011 101    size=10
processing     
-1
[]
processing     setctr a1 r3
-1
['setctr', 'a1', 'r3']
... @3521 0000110111000001  :  11011011011
                          110110 11 011    size=11
processing     
-1
[]
processing     ; ==================================================== 
4
hey
[]
processing     
-1
[]
processing     ; On construit le saut à réaliser en fin de ligne dans r5
4
hey
[]
processing         
-1
[]
processing     leti r5 152
-1
['leti', 'r5', '152']
... @3532 0000110111001100  :  011110111000000000000000000000000010011000
                          0111 101 110 00000000000000000000000010011000   size=42
processing     shift l r5 4
-1
['shift', 'l', 'r5', '4']
... @3574 0000110111110110  :  100001010000100
                          1000 0 101 0000100   size=15
processing     
-1
[]
processing     
-1
[]
processing     ; ==================================================== 
4
hey
[]
processing     
-1
[]
processing     ; Boucle pour chaque ligne à écrire
4
hey
[]
processing     
-1
[]
processing     leti r1 0
-1
['leti', 'r1', '0']
... @3589 0000111000000101  :  011100100
                          0111 001 0 0   size=9
processing     
-1
[]
processing     boucle_carac_line_back:
-1
['boucle_carac_line_back:']
processing     cmpi r1 7    
-1
['cmpi', 'r1', '7']
... @3598 0000111000001110  :  01010011000000111
                          0101 001 10 00000111   size=17
processing     jumpif sgt boucle_carac_line
-1
['jumpif', 'sgt', 'boucle_carac_line']
... @3615 0000111000011111  :  1011010100000000001010111
                          1011 010 10 0000000001010111   size=25
processing         call putlc ; On ecrit une ligne du caractere
19
hey
['call', 'putlc']
... @3640 0000111000111000  :  110101100000111011111110
                          110101 10 0000111011111110   size=24
processing         
-1
[]
processing         ; On saute de 120 pixels
8
hey
[]
processing         getctr a0 r2
-1
['getctr', 'a0', 'r2']
... @3664 0000111001010000  :  11011110010
                          110111 10 010    size=11
processing         add2 r2 r5 ; On ajoute r5 = 120 * 16 dans r2
19
hey
['add2', 'r2', 'r5']
... @3675 0000111001011011  :  0000010101
                          0000 010 101    size=10
processing         setctr a0 r2
-1
['setctr', 'a0', 'r2']
... @3685 0000111001100101  :  11011010010
                          110110 10 010    size=11
processing         add2i r1 1
-1
['add2i', 'r1', '1']
... @3696 0000111001110000  :  000100101
                          0001 001 0 1   size=9
processing     jump boucle_carac_line_back    
-1
['jump', 'boucle_carac_line_back']
... @3705 0000111001111001  :  1010101111111101111111
                          1010 10 1111111101111111   size=22
processing     boucle_carac_line:
-1
['boucle_carac_line:']
processing     
-1
[]
processing     pop 64 r7
-1
['pop', '64', 'r7']
... @3727 0000111010001111  :  1001101111111
                          10011 01 111 111    size=13
processing     pop 64 r6
-1
['pop', '64', 'r6']
... @3740 0000111010011100  :  1001101111110
                          10011 01 111 110    size=13
processing     pop 64 r5
-1
['pop', '64', 'r5']
... @3753 0000111010101001  :  1001101111101
                          10011 01 111 101    size=13
processing     pop 64 r4
-1
['pop', '64', 'r4']
... @3766 0000111010110110  :  1001101111100
                          10011 01 111 100    size=13
processing     pop 64 r3
-1
['pop', '64', 'r3']
... @3779 0000111011000011  :  1001101111011
                          10011 01 111 011    size=13
processing     pop 64 r2
-1
['pop', '64', 'r2']
... @3792 0000111011010000  :  1001101111010
                          10011 01 111 010    size=13
processing     pop 64 r1
-1
['pop', '64', 'r1']
... @3805 0000111011011101  :  1001101111001
                          10011 01 111 001    size=13
processing     pop 64 r0
-1
['pop', '64', 'r0']
... @3818 0000111011101010  :  1001101111000
                          10011 01 111 000    size=13
processing     
-1
[]
processing     return
-1
['return']
... @3831 0000111011110111  :  1110001
                          1110001    size=7
processing     
-1
[]
processing     
-1
[]
processing ; ===================================================
0
hey
[]
processing 
-1
[]
processing ; Pour chaque ligne
0
hey
[]
processing 
-1
[]
processing putlc: 
-1
['putlc:']
processing 
-1
[]
processing     push 64 r1
-1
['push', '64', 'r1']
... @3838 0000111011111110  :  1110000111001
                          1110000 111 001    size=13
processing     push 64 r5
-1
['push', '64', 'r5']
... @3851 0000111100001011  :  1110000111101
                          1110000 111 101    size=13
processing     push 64 r6
-1
['push', '64', 'r6']
... @3864 0000111100011000  :  1110000111110
                          1110000 111 110    size=13
processing     
-1
[]
processing     readze a1 8 r5 ; On lit 8 pixels du caractere ie une ligne    
19
hey
['readze', 'a1', '8', 'r5']
... @3877 0000111100100101  :  1001011100101
                          10010 11 100 101    size=13
processing     leti r1 0
-1
['leti', 'r1', '0']
... @3890 0000111100110010  :  011100100
                          0111 001 0 0   size=9
processing     
-1
[]
processing     boucle_carac_pix_back:
-1
['boucle_carac_pix_back:']
processing     cmpi r1 8
-1
['cmpi', 'r1', '8']
... @3899 0000111100111011  :  01010011000001000
                          0101 001 10 00001000   size=17
processing     jumpif sgt boucle_carac_pix_end
-1
['jumpif', 'sgt', 'boucle_carac_pix_end']
... @3916 0000111101001100  :  1011010100000000010001100
                          1011 010 10 0000000010001100   size=25
processing         shift r r5 1        
-1
['shift', 'r', 'r5', '1']
... @3941 0000111101100101  :  100011011
                          1000 1 101 1   size=9
processing         jumpif nc carac_nowrite ; Si bit = 1 alors on ecrit
32
hey
['jumpif', 'nc', 'carac_nowrite']
... @3950 0000111101101110  :  1011101100000000000100100
                          1011 101 10 0000000000100100   size=25
processing             write a0 16 r0        
-1
['write', 'a0', '16', 'r0']
... @3975 0000111110000111  :  11010010101000
                          110100 10 101 000    size=14
processing         jump carac_writeend
-1
['jump', 'carac_writeend']
... @3989 0000111110010101  :  1010100000000000100111
                          1010 10 0000000000100111   size=22
processing         carac_nowrite: ; Sinon on ne fait rien et on déplace juste a0
23
hey
['carac_nowrite:']
processing             getctr a0 r6
-1
['getctr', 'a0', 'r6']
... @4011 0000111110101011  :  11011110110
                          110111 10 110    size=11
processing             add2i r6 16
-1
['add2i', 'r6', '16']
... @4022 0000111110110110  :  00011101000010000
                          0001 110 10 00010000   size=17
processing             setctr a0 r6      
-1
['setctr', 'a0', 'r6']
... @4039 0000111111000111  :  11011010110
                          110110 10 110    size=11
processing         
-1
[]
processing         carac_writeend:
-1
['carac_writeend:']
processing         
-1
[]
processing         add2i r1 1    
-1
['add2i', 'r1', '1']
... @4050 0000111111010010  :  000100101
                          0001 001 0 1   size=9
processing     jump boucle_carac_pix_back
-1
['jump', 'boucle_carac_pix_back']
... @4059 0000111111011011  :  1010101111111101001010
                          1010 10 1111111101001010   size=22
processing     boucle_carac_pix_end:
-1
['boucle_carac_pix_end:']
processing     
-1
[]
processing     
-1
[]
processing     pop 64 r6
-1
['pop', '64', 'r6']
... @4081 0000111111110001  :  1001101111110
                          10011 01 111 110    size=13
processing     pop 64 r5
-1
['pop', '64', 'r5']
... @4094 0000111111111110  :  1001101111101
                          10011 01 111 101    size=13
processing     pop 64 r1
-1
['pop', '64', 'r1']
... @4107 0001000000001011  :  1001101111001
                          10011 01 111 001    size=13
processing     
-1
[]
processing     return
-1
['return']
... @4120 0001000000011000  :  1110001
                          1110001    size=7
processing     
-1
[]
processing     
-1
[]
processing     
-1
[]
processing 
-1
[]
processing jump endfont
-1
['jump', 'endfont']
... @4127 0001000000011111  :  1010100010000000000000
                          1010 10 0010000000000000   size=22
processing font: ; Binary font
6
hey
['font:']
processing     load font.mem
-1
['load', 'font.mem']

size=8192
processing endfont:
-1
['endfont:']
processing 
-1
[]
processing skipputchar:
-1
['skipputchar:']
Average instruction size is 28.633410672853827
