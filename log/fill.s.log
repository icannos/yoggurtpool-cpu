
 PASS 1
processing 
-1
[]
processing jump skipfill
-1
['jump', 'skipfill']
... @0 0000000000000000  :  1010100000000000000000
                          1010 10 0000000000000000   size=22
processing fill:
-1
['fill:']
processing push 64 r0
-1
['push', '64', 'r0']
... @22 0000000000010110  :  1110000111000
                          1110000 111 000    size=13
processing push 64 r1
-1
['push', '64', 'r1']
... @35 0000000000100011  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @48 0000000000110000  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @61 0000000000111101  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r4
-1
['push', '64', 'r4']
... @74 0000000001001010  :  1110000111100
                          1110000 111 100    size=13
processing push 64 r5
-1
['push', '64', 'r5']
... @87 0000000001010111  :  1110000111101
                          1110000 111 101    size=13
processing push 64 r6
-1
['push', '64', 'r6']
... @100 0000000001100100  :  1110000111110
                          1110000 111 110    size=13
processing 
-1
[]
processing ;on choisit la plus petite abscisse
0
hey
[]
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @113 0000000001110001  :  0100001011
                          0100 001 011    size=10
processing jumpif lt echange
-1
['jumpif', 'lt', 'echange']
... @123 0000000001111011  :  1011110100000000000000000
                          1011 110 10 0000000000000000   size=25
processing let r5 r1
-1
['let', 'r5', 'r1']
... @148 0000000010010100  :  0110101001
                          0110 101 001    size=10
processing let r1 r3
-1
['let', 'r1', 'r3']
... @158 0000000010011110  :  0110001011
                          0110 001 011    size=10
processing let r3 r5
-1
['let', 'r3', 'r5']
... @168 0000000010101000  :  0110011101
                          0110 011 101    size=10
processing echange:
-1
['echange:']
processing 
-1
[]
processing 
-1
[]
processing ;on choisit la plus grande ordonnee
0
hey
[]
processing cmp r2 r4
-1
['cmp', 'r2', 'r4']
... @178 0000000010110010  :  0100010100
                          0100 010 100    size=10
processing jumpif gt echangebis
-1
['jumpif', 'gt', 'echangebis']
... @188 0000000010111100  :  1011100100000000000000000
                          1011 100 10 0000000000000000   size=25
processing let r5 r2
-1
['let', 'r5', 'r2']
... @213 0000000011010101  :  0110101010
                          0110 101 010    size=10
processing let r2 r4
-1
['let', 'r2', 'r4']
... @223 0000000011011111  :  0110010100
                          0110 010 100    size=10
processing let r4 r5 ; r4 est pour l'instant inutile
10
hey
['let', 'r4', 'r5']
... @233 0000000011101001  :  0110100101
                          0110 100 101    size=10
processing echangebis:
-1
['echangebis:']
processing 
-1
[]
processing sub2 r3 r1 ; r3 contient la largeur du rectangle
11
hey
['sub2', 'r3', 'r1']
... @243 0000000011110011  :  0010011001
                          0010 011 001    size=10
processing add2i r3 1
-1
['add2i', 'r3', '1']
... @253 0000000011111101  :  000101101
                          0001 011 0 1   size=9
processing sub3 r5 r2 r4
-1
['sub3', 'r5', 'r2', 'r4']
... @262 0000000100000110  :  1110100101010100
                          1110100 101 010 100    size=16
processing add2i r5 1; r5 contient le nombre de lignes a tracer (voir si le 1 est utile)
10
hey
['add2i', 'r5', '1']
... @278 0000000100010110  :  000110101
                          0001 101 0 1   size=9
processing leti r4 160
-1
['leti', 'r4', '160']
... @287 0000000100011111  :  011110011000000000000000000000000010100000
                          0111 100 110 00000000000000000000000010100000   size=42
processing sub2 r4 r3; r4 contient le nombre de pixels a sauter avant d'ecrire a nouveau
10
hey
['sub2', 'r4', 'r3']
... @329 0000000101001001  :  0010100011
                          0010 100 011    size=10
processing shift left r4 4 ; nombre de bits a sauter
16
hey
['shift', 'left', 'r4', '4']
... @339 0000000101010011  :  100001000000100
                          1000 0 100 0000100   size=15
processing 
-1
[]
processing ;fin de la preparation calculatoire
0
hey
[]
processing 
-1
[]
processing 
-1
[]
processing ;partie mettant dans r6 l'adresse du premier point
0
hey
[]
processing leti r6 1073350080
-1
['leti', 'r6', '1073350080']
... @354 0000000101100010  :  011111011000111111111110100000010111000000
                          0111 110 110 00111111111110100000010111000000   size=42
processing sub2i r2 127
-1
['sub2i', 'r2', '127']
... @396 0000000110001100  :  00110101001111111
                          0011 010 10 01111111   size=17
processing shift left r2 9
-1
['shift', 'left', 'r2', '9']
... @413 0000000110011101  :  100000100001001
                          1000 0 010 0001001   size=15
processing sub2 r6 r2
-1
['sub2', 'r6', 'r2']
... @428 0000000110101100  :  0010110010
                          0010 110 010    size=10
processing shift left r2 2
-1
['shift', 'left', 'r2', '2']
... @438 0000000110110110  :  100000100000010
                          1000 0 010 0000010   size=15
processing sub2 r6 r2
-1
['sub2', 'r6', 'r2']
... @453 0000000111000101  :  0010110010
                          0010 110 010    size=10
processing shift left r1 4
-1
['shift', 'left', 'r1', '4']
... @463 0000000111001111  :  100000010000100
                          1000 0 001 0000100   size=15
processing add2 r6 r1
-1
['add2', 'r6', 'r1']
... @478 0000000111011110  :  0000110001
                          0000 110 001    size=10
processing setctr a0 r6
-1
['setctr', 'a0', 'r6']
... @488 0000000111101000  :  11011010110
                          110110 10 110    size=11
processing 
-1
[]
processing boucley:
-1
['boucley:']
processing cmpi r5 1 ;on compte le nombre de ligne qui reste a tracer
10
hey
['cmpi', 'r5', '1']
... @499 0000000111110011  :  010110101
                          0101 101 0 1   size=9
processing jumpif slt fin
-1
['jumpif', 'slt', 'fin']
... @508 0000000111111100  :  1011011100000000000000000
                          1011 011 10 0000000000000000   size=25
processing sub2i r5 1
-1
['sub2i', 'r5', '1']
... @533 0000001000010101  :  001110101
                          0011 101 0 1   size=9
processing 
-1
[]
processing let r1 r3
-1
['let', 'r1', 'r3']
... @542 0000001000011110  :  0110001011
                          0110 001 011    size=10
processing bouclex:
-1
['bouclex:']
processing cmpi r3 1 ; on compte le nombre de colonne a remplir
10
hey
['cmpi', 'r3', '1']
... @552 0000001000101000  :  010101101
                          0101 011 0 1   size=9
processing jumpif slt finligne
-1
['jumpif', 'slt', 'finligne']
... @561 0000001000110001  :  1011011100000000000000000
                          1011 011 10 0000000000000000   size=25
processing sub2i r3 1
-1
['sub2i', 'r3', '1']
... @586 0000001001001010  :  001101101
                          0011 011 0 1   size=9
processing write a0 16 r0 ; on ecrit la ligne
15
hey
['write', 'a0', '16', 'r0']
... @595 0000001001010011  :  11010010101000
                          110100 10 101 000    size=14
processing jump bouclex
-1
['jump', 'bouclex']
... @609 0000001001100001  :  1010101111111110110001
                          1010 10 1111111110110001   size=22
processing finligne:
-1
['finligne:']
processing let r3 r1
-1
['let', 'r3', 'r1']
... @631 0000001001110111  :  0110011001
                          0110 011 001    size=10
processing 
-1
[]
processing getctr a0 r6
-1
['getctr', 'a0', 'r6']
... @641 0000001010000001  :  11011110110
                          110111 10 110    size=11
processing add2 r6 r4
-1
['add2', 'r6', 'r4']
... @652 0000001010001100  :  0000110100
                          0000 110 100    size=10
processing setctr a0 r6 ; saut de la ligne
13
hey
['setctr', 'a0', 'r6']
... @662 0000001010010110  :  11011010110
                          110110 10 110    size=11
processing 
-1
[]
processing jump boucley
-1
['jump', 'boucley']
... @673 0000001010100001  :  1010101111111100111100
                          1010 10 1111111100111100   size=22
processing 
-1
[]
processing pop 64 r6
-1
['pop', '64', 'r6']
... @695 0000001010110111  :  1001101111110
                          10011 01 111 110    size=13
processing pop 64 r5
-1
['pop', '64', 'r5']
... @708 0000001011000100  :  1001101111101
                          10011 01 111 101    size=13
processing pop 64 r4
-1
['pop', '64', 'r4']
... @721 0000001011010001  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @734 0000001011011110  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @747 0000001011101011  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @760 0000001011111000  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @773 0000001100000101  :  1001101111000
                          10011 01 111 000    size=13
processing 
-1
[]
processing fin:
-1
['fin:']
processing skipfill:
-1
['skipfill:']

 PASS 2
processing 
-1
[]
processing jump skipfill
-1
['jump', 'skipfill']
... @0 0000000000000000  :  1010100000001011111100
                          1010 10 0000001011111100   size=22
processing fill:
-1
['fill:']
processing push 64 r0
-1
['push', '64', 'r0']
... @22 0000000000010110  :  1110000111000
                          1110000 111 000    size=13
processing push 64 r1
-1
['push', '64', 'r1']
... @35 0000000000100011  :  1110000111001
                          1110000 111 001    size=13
processing push 64 r2
-1
['push', '64', 'r2']
... @48 0000000000110000  :  1110000111010
                          1110000 111 010    size=13
processing push 64 r3
-1
['push', '64', 'r3']
... @61 0000000000111101  :  1110000111011
                          1110000 111 011    size=13
processing push 64 r4
-1
['push', '64', 'r4']
... @74 0000000001001010  :  1110000111100
                          1110000 111 100    size=13
processing push 64 r5
-1
['push', '64', 'r5']
... @87 0000000001010111  :  1110000111101
                          1110000 111 101    size=13
processing push 64 r6
-1
['push', '64', 'r6']
... @100 0000000001100100  :  1110000111110
                          1110000 111 110    size=13
processing 
-1
[]
processing ;on choisit la plus petite abscisse
0
hey
[]
processing cmp r1 r3
-1
['cmp', 'r1', 'r3']
... @113 0000000001110001  :  0100001011
                          0100 001 011    size=10
processing jumpif lt echange
-1
['jumpif', 'lt', 'echange']
... @123 0000000001111011  :  1011110100000000000011110
                          1011 110 10 0000000000011110   size=25
processing let r5 r1
-1
['let', 'r5', 'r1']
... @148 0000000010010100  :  0110101001
                          0110 101 001    size=10
processing let r1 r3
-1
['let', 'r1', 'r3']
... @158 0000000010011110  :  0110001011
                          0110 001 011    size=10
processing let r3 r5
-1
['let', 'r3', 'r5']
... @168 0000000010101000  :  0110011101
                          0110 011 101    size=10
processing echange:
-1
['echange:']
processing 
-1
[]
processing 
-1
[]
processing ;on choisit la plus grande ordonnee
0
hey
[]
processing cmp r2 r4
-1
['cmp', 'r2', 'r4']
... @178 0000000010110010  :  0100010100
                          0100 010 100    size=10
processing jumpif gt echangebis
-1
['jumpif', 'gt', 'echangebis']
... @188 0000000010111100  :  1011100100000000000011110
                          1011 100 10 0000000000011110   size=25
processing let r5 r2
-1
['let', 'r5', 'r2']
... @213 0000000011010101  :  0110101010
                          0110 101 010    size=10
processing let r2 r4
-1
['let', 'r2', 'r4']
... @223 0000000011011111  :  0110010100
                          0110 010 100    size=10
processing let r4 r5 ; r4 est pour l'instant inutile
10
hey
['let', 'r4', 'r5']
... @233 0000000011101001  :  0110100101
                          0110 100 101    size=10
processing echangebis:
-1
['echangebis:']
processing 
-1
[]
processing sub2 r3 r1 ; r3 contient la largeur du rectangle
11
hey
['sub2', 'r3', 'r1']
... @243 0000000011110011  :  0010011001
                          0010 011 001    size=10
processing add2i r3 1
-1
['add2i', 'r3', '1']
... @253 0000000011111101  :  000101101
                          0001 011 0 1   size=9
processing sub3 r5 r2 r4
-1
['sub3', 'r5', 'r2', 'r4']
... @262 0000000100000110  :  1110100101010100
                          1110100 101 010 100    size=16
processing add2i r5 1; r5 contient le nombre de lignes a tracer (voir si le 1 est utile)
10
hey
['add2i', 'r5', '1']
... @278 0000000100010110  :  000110101
                          0001 101 0 1   size=9
processing leti r4 160
-1
['leti', 'r4', '160']
... @287 0000000100011111  :  011110011000000000000000000000000010100000
                          0111 100 110 00000000000000000000000010100000   size=42
processing sub2 r4 r3; r4 contient le nombre de pixels a sauter avant d'ecrire a nouveau
10
hey
['sub2', 'r4', 'r3']
... @329 0000000101001001  :  0010100011
                          0010 100 011    size=10
processing shift left r4 4 ; nombre de bits a sauter
16
hey
['shift', 'left', 'r4', '4']
... @339 0000000101010011  :  100001000000100
                          1000 0 100 0000100   size=15
processing 
-1
[]
processing ;fin de la preparation calculatoire
0
hey
[]
processing 
-1
[]
processing 
-1
[]
processing ;partie mettant dans r6 l'adresse du premier point
0
hey
[]
processing leti r6 1073350080
-1
['leti', 'r6', '1073350080']
... @354 0000000101100010  :  011111011000111111111110100000010111000000
                          0111 110 110 00111111111110100000010111000000   size=42
processing sub2i r2 127
-1
['sub2i', 'r2', '127']
... @396 0000000110001100  :  00110101001111111
                          0011 010 10 01111111   size=17
processing shift left r2 9
-1
['shift', 'left', 'r2', '9']
... @413 0000000110011101  :  100000100001001
                          1000 0 010 0001001   size=15
processing sub2 r6 r2
-1
['sub2', 'r6', 'r2']
... @428 0000000110101100  :  0010110010
                          0010 110 010    size=10
processing shift left r2 2
-1
['shift', 'left', 'r2', '2']
... @438 0000000110110110  :  100000100000010
                          1000 0 010 0000010   size=15
processing sub2 r6 r2
-1
['sub2', 'r6', 'r2']
... @453 0000000111000101  :  0010110010
                          0010 110 010    size=10
processing shift left r1 4
-1
['shift', 'left', 'r1', '4']
... @463 0000000111001111  :  100000010000100
                          1000 0 001 0000100   size=15
processing add2 r6 r1
-1
['add2', 'r6', 'r1']
... @478 0000000111011110  :  0000110001
                          0000 110 001    size=10
processing setctr a0 r6
-1
['setctr', 'a0', 'r6']
... @488 0000000111101000  :  11011010110
                          110110 10 110    size=11
processing 
-1
[]
processing boucley:
-1
['boucley:']
processing cmpi r5 1 ;on compte le nombre de ligne qui reste a tracer
10
hey
['cmpi', 'r5', '1']
... @499 0000000111110011  :  010110101
                          0101 101 0 1   size=9
processing jumpif slt fin
-1
['jumpif', 'slt', 'fin']
... @508 0000000111111100  :  1011011100000000011111101
                          1011 011 10 0000000011111101   size=25
processing sub2i r5 1
-1
['sub2i', 'r5', '1']
... @533 0000001000010101  :  001110101
                          0011 101 0 1   size=9
processing 
-1
[]
processing let r1 r3
-1
['let', 'r1', 'r3']
... @542 0000001000011110  :  0110001011
                          0110 001 011    size=10
processing bouclex:
-1
['bouclex:']
processing cmpi r3 1 ; on compte le nombre de colonne a remplir
10
hey
['cmpi', 'r3', '1']
... @552 0000001000101000  :  010101101
                          0101 011 0 1   size=9
processing jumpif slt finligne
-1
['jumpif', 'slt', 'finligne']
... @561 0000001000110001  :  1011011100000000000101101
                          1011 011 10 0000000000101101   size=25
processing sub2i r3 1
-1
['sub2i', 'r3', '1']
... @586 0000001001001010  :  001101101
                          0011 011 0 1   size=9
processing write a0 16 r0 ; on ecrit la ligne
15
hey
['write', 'a0', '16', 'r0']
... @595 0000001001010011  :  11010010101000
                          110100 10 101 000    size=14
processing jump bouclex
-1
['jump', 'bouclex']
... @609 0000001001100001  :  1010101111111110110001
                          1010 10 1111111110110001   size=22
processing finligne:
-1
['finligne:']
processing let r3 r1
-1
['let', 'r3', 'r1']
... @631 0000001001110111  :  0110011001
                          0110 011 001    size=10
processing 
-1
[]
processing getctr a0 r6
-1
['getctr', 'a0', 'r6']
... @641 0000001010000001  :  11011110110
                          110111 10 110    size=11
processing add2 r6 r4
-1
['add2', 'r6', 'r4']
... @652 0000001010001100  :  0000110100
                          0000 110 100    size=10
processing setctr a0 r6 ; saut de la ligne
13
hey
['setctr', 'a0', 'r6']
... @662 0000001010010110  :  11011010110
                          110110 10 110    size=11
processing 
-1
[]
processing jump boucley
-1
['jump', 'boucley']
... @673 0000001010100001  :  1010101111111100111100
                          1010 10 1111111100111100   size=22
processing 
-1
[]
processing pop 64 r6
-1
['pop', '64', 'r6']
... @695 0000001010110111  :  1001101111110
                          10011 01 111 110    size=13
processing pop 64 r5
-1
['pop', '64', 'r5']
... @708 0000001011000100  :  1001101111101
                          10011 01 111 101    size=13
processing pop 64 r4
-1
['pop', '64', 'r4']
... @721 0000001011010001  :  1001101111100
                          10011 01 111 100    size=13
processing pop 64 r3
-1
['pop', '64', 'r3']
... @734 0000001011011110  :  1001101111011
                          10011 01 111 011    size=13
processing pop 64 r2
-1
['pop', '64', 'r2']
... @747 0000001011101011  :  1001101111010
                          10011 01 111 010    size=13
processing pop 64 r1
-1
['pop', '64', 'r1']
... @760 0000001011111000  :  1001101111001
                          10011 01 111 001    size=13
processing pop 64 r0
-1
['pop', '64', 'r0']
... @773 0000001100000101  :  1001101111000
                          10011 01 111 000    size=13
processing 
-1
[]
processing fin:
-1
['fin:']
processing skipfill:
-1
['skipfill:']
Average instruction size is 9.703703703703704
